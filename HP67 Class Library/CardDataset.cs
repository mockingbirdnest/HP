//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HP67_Class_Library {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class CardDataset : DataSet {
        
        private CardDataTable tableCard;
        
        private CardSlotDataTable tableCardSlot;
        
        private TextBoxDataTable tableTextBox;
        
        private RTFBoxDataTable tableRTFBox;
        
        private DisplayDataTable tableDisplay;
        
        private EngineDataTable tableEngine;
        
        private FlagDataTable tableFlag;
        
        private MemoryDataTable tableMemory;
        
        private ProgramDataTable tableProgram;
        
        private DataRelation relationCardSlot_TextBox;
        
        private DataRelation relationCardSlot_RTFBox;
        
        private DataRelation relationEngine_Flag;
        
        private DataRelation relationCard_CardSlot;
        
        private DataRelation relationCard_Display;
        
        private DataRelation relationCard_Engine;
        
        private DataRelation relationCard_Memory;
        
        private DataRelation relationCard_Program;
        
        public CardDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected CardDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Card"] != null)) {
                    this.Tables.Add(new CardDataTable(ds.Tables["Card"]));
                }
                if ((ds.Tables["CardSlot"] != null)) {
                    this.Tables.Add(new CardSlotDataTable(ds.Tables["CardSlot"]));
                }
                if ((ds.Tables["TextBox"] != null)) {
                    this.Tables.Add(new TextBoxDataTable(ds.Tables["TextBox"]));
                }
                if ((ds.Tables["RTFBox"] != null)) {
                    this.Tables.Add(new RTFBoxDataTable(ds.Tables["RTFBox"]));
                }
                if ((ds.Tables["Display"] != null)) {
                    this.Tables.Add(new DisplayDataTable(ds.Tables["Display"]));
                }
                if ((ds.Tables["Engine"] != null)) {
                    this.Tables.Add(new EngineDataTable(ds.Tables["Engine"]));
                }
                if ((ds.Tables["Flag"] != null)) {
                    this.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
                }
                if ((ds.Tables["Memory"] != null)) {
                    this.Tables.Add(new MemoryDataTable(ds.Tables["Memory"]));
                }
                if ((ds.Tables["Program"] != null)) {
                    this.Tables.Add(new ProgramDataTable(ds.Tables["Program"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CardDataTable Card {
            get {
                return this.tableCard;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CardSlotDataTable CardSlot {
            get {
                return this.tableCardSlot;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TextBoxDataTable TextBox {
            get {
                return this.tableTextBox;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RTFBoxDataTable RTFBox {
            get {
                return this.tableRTFBox;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DisplayDataTable Display {
            get {
                return this.tableDisplay;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EngineDataTable Engine {
            get {
                return this.tableEngine;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlagDataTable Flag {
            get {
                return this.tableFlag;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MemoryDataTable Memory {
            get {
                return this.tableMemory;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProgramDataTable Program {
            get {
                return this.tableProgram;
            }
        }
        
        public override DataSet Clone() {
            CardDataset cln = ((CardDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Card"] != null)) {
                this.Tables.Add(new CardDataTable(ds.Tables["Card"]));
            }
            if ((ds.Tables["CardSlot"] != null)) {
                this.Tables.Add(new CardSlotDataTable(ds.Tables["CardSlot"]));
            }
            if ((ds.Tables["TextBox"] != null)) {
                this.Tables.Add(new TextBoxDataTable(ds.Tables["TextBox"]));
            }
            if ((ds.Tables["RTFBox"] != null)) {
                this.Tables.Add(new RTFBoxDataTable(ds.Tables["RTFBox"]));
            }
            if ((ds.Tables["Display"] != null)) {
                this.Tables.Add(new DisplayDataTable(ds.Tables["Display"]));
            }
            if ((ds.Tables["Engine"] != null)) {
                this.Tables.Add(new EngineDataTable(ds.Tables["Engine"]));
            }
            if ((ds.Tables["Flag"] != null)) {
                this.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
            }
            if ((ds.Tables["Memory"] != null)) {
                this.Tables.Add(new MemoryDataTable(ds.Tables["Memory"]));
            }
            if ((ds.Tables["Program"] != null)) {
                this.Tables.Add(new ProgramDataTable(ds.Tables["Program"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCard = ((CardDataTable)(this.Tables["Card"]));
            if ((this.tableCard != null)) {
                this.tableCard.InitVars();
            }
            this.tableCardSlot = ((CardSlotDataTable)(this.Tables["CardSlot"]));
            if ((this.tableCardSlot != null)) {
                this.tableCardSlot.InitVars();
            }
            this.tableTextBox = ((TextBoxDataTable)(this.Tables["TextBox"]));
            if ((this.tableTextBox != null)) {
                this.tableTextBox.InitVars();
            }
            this.tableRTFBox = ((RTFBoxDataTable)(this.Tables["RTFBox"]));
            if ((this.tableRTFBox != null)) {
                this.tableRTFBox.InitVars();
            }
            this.tableDisplay = ((DisplayDataTable)(this.Tables["Display"]));
            if ((this.tableDisplay != null)) {
                this.tableDisplay.InitVars();
            }
            this.tableEngine = ((EngineDataTable)(this.Tables["Engine"]));
            if ((this.tableEngine != null)) {
                this.tableEngine.InitVars();
            }
            this.tableFlag = ((FlagDataTable)(this.Tables["Flag"]));
            if ((this.tableFlag != null)) {
                this.tableFlag.InitVars();
            }
            this.tableMemory = ((MemoryDataTable)(this.Tables["Memory"]));
            if ((this.tableMemory != null)) {
                this.tableMemory.InitVars();
            }
            this.tableProgram = ((ProgramDataTable)(this.Tables["Program"]));
            if ((this.tableProgram != null)) {
                this.tableProgram.InitVars();
            }
            this.relationCardSlot_TextBox = this.Relations["CardSlot_TextBox"];
            this.relationCardSlot_RTFBox = this.Relations["CardSlot_RTFBox"];
            this.relationEngine_Flag = this.Relations["Engine_Flag"];
            this.relationCard_CardSlot = this.Relations["Card_CardSlot"];
            this.relationCard_Display = this.Relations["Card_Display"];
            this.relationCard_Engine = this.Relations["Card_Engine"];
            this.relationCard_Memory = this.Relations["Card_Memory"];
            this.relationCard_Program = this.Relations["Card_Program"];
        }
        
        private void InitClass() {
            this.DataSetName = "CardDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CardDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCard = new CardDataTable();
            this.Tables.Add(this.tableCard);
            this.tableCardSlot = new CardSlotDataTable();
            this.Tables.Add(this.tableCardSlot);
            this.tableTextBox = new TextBoxDataTable();
            this.Tables.Add(this.tableTextBox);
            this.tableRTFBox = new RTFBoxDataTable();
            this.Tables.Add(this.tableRTFBox);
            this.tableDisplay = new DisplayDataTable();
            this.Tables.Add(this.tableDisplay);
            this.tableEngine = new EngineDataTable();
            this.Tables.Add(this.tableEngine);
            this.tableFlag = new FlagDataTable();
            this.Tables.Add(this.tableFlag);
            this.tableMemory = new MemoryDataTable();
            this.Tables.Add(this.tableMemory);
            this.tableProgram = new ProgramDataTable();
            this.Tables.Add(this.tableProgram);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Card_CardSlot", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableCardSlot.Card_IdColumn});
            this.tableCardSlot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CardSlot_TextBox", new DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new DataColumn[] {
                        this.tableTextBox.CardSlot_IdColumn});
            this.tableTextBox.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CardSlot_RTFBox", new DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new DataColumn[] {
                        this.tableRTFBox.CardSlot_IdColumn});
            this.tableRTFBox.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Card_Display", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableDisplay.Card_IdColumn});
            this.tableDisplay.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Card_Engine", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableEngine.Card_IdColumn});
            this.tableEngine.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Engine_Flag", new DataColumn[] {
                        this.tableEngine.Engine_IdColumn}, new DataColumn[] {
                        this.tableFlag.Engine_IdColumn});
            this.tableFlag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Card_Memory", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableMemory.Card_IdColumn});
            this.tableMemory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Card_Program", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableProgram.Card_IdColumn});
            this.tableProgram.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationCardSlot_TextBox = new DataRelation("CardSlot_TextBox", new DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new DataColumn[] {
                        this.tableTextBox.CardSlot_IdColumn}, false);
            this.relationCardSlot_TextBox.Nested = true;
            this.Relations.Add(this.relationCardSlot_TextBox);
            this.relationCardSlot_RTFBox = new DataRelation("CardSlot_RTFBox", new DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new DataColumn[] {
                        this.tableRTFBox.CardSlot_IdColumn}, false);
            this.relationCardSlot_RTFBox.Nested = true;
            this.Relations.Add(this.relationCardSlot_RTFBox);
            this.relationEngine_Flag = new DataRelation("Engine_Flag", new DataColumn[] {
                        this.tableEngine.Engine_IdColumn}, new DataColumn[] {
                        this.tableFlag.Engine_IdColumn}, false);
            this.relationEngine_Flag.Nested = true;
            this.Relations.Add(this.relationEngine_Flag);
            this.relationCard_CardSlot = new DataRelation("Card_CardSlot", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableCardSlot.Card_IdColumn}, false);
            this.relationCard_CardSlot.Nested = true;
            this.Relations.Add(this.relationCard_CardSlot);
            this.relationCard_Display = new DataRelation("Card_Display", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableDisplay.Card_IdColumn}, false);
            this.relationCard_Display.Nested = true;
            this.Relations.Add(this.relationCard_Display);
            this.relationCard_Engine = new DataRelation("Card_Engine", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableEngine.Card_IdColumn}, false);
            this.relationCard_Engine.Nested = true;
            this.Relations.Add(this.relationCard_Engine);
            this.relationCard_Memory = new DataRelation("Card_Memory", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableMemory.Card_IdColumn}, false);
            this.relationCard_Memory.Nested = true;
            this.Relations.Add(this.relationCard_Memory);
            this.relationCard_Program = new DataRelation("Card_Program", new DataColumn[] {
                        this.tableCard.Card_IdColumn}, new DataColumn[] {
                        this.tableProgram.Card_IdColumn}, false);
            this.relationCard_Program.Nested = true;
            this.Relations.Add(this.relationCard_Program);
        }
        
        private bool ShouldSerializeCard() {
            return false;
        }
        
        private bool ShouldSerializeCardSlot() {
            return false;
        }
        
        private bool ShouldSerializeTextBox() {
            return false;
        }
        
        private bool ShouldSerializeRTFBox() {
            return false;
        }
        
        private bool ShouldSerializeDisplay() {
            return false;
        }
        
        private bool ShouldSerializeEngine() {
            return false;
        }
        
        private bool ShouldSerializeFlag() {
            return false;
        }
        
        private bool ShouldSerializeMemory() {
            return false;
        }
        
        private bool ShouldSerializeProgram() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CardRowChangeEventHandler(object sender, CardRowChangeEvent e);
        
        public delegate void CardSlotRowChangeEventHandler(object sender, CardSlotRowChangeEvent e);
        
        public delegate void TextBoxRowChangeEventHandler(object sender, TextBoxRowChangeEvent e);
        
        public delegate void RTFBoxRowChangeEventHandler(object sender, RTFBoxRowChangeEvent e);
        
        public delegate void DisplayRowChangeEventHandler(object sender, DisplayRowChangeEvent e);
        
        public delegate void EngineRowChangeEventHandler(object sender, EngineRowChangeEvent e);
        
        public delegate void FlagRowChangeEventHandler(object sender, FlagRowChangeEvent e);
        
        public delegate void MemoryRowChangeEventHandler(object sender, MemoryRowChangeEvent e);
        
        public delegate void ProgramRowChangeEventHandler(object sender, ProgramRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CardDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCard_Id;
            
            internal CardDataTable() : 
                    base("Card") {
                this.InitClass();
            }
            
            internal CardDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            public CardRow this[int index] {
                get {
                    return ((CardRow)(this.Rows[index]));
                }
            }
            
            public event CardRowChangeEventHandler CardRowChanged;
            
            public event CardRowChangeEventHandler CardRowChanging;
            
            public event CardRowChangeEventHandler CardRowDeleted;
            
            public event CardRowChangeEventHandler CardRowDeleting;
            
            public void AddCardRow(CardRow row) {
                this.Rows.Add(row);
            }
            
            public CardRow AddCardRow() {
                CardRow rowCardRow = ((CardRow)(this.NewRow()));
                rowCardRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowCardRow);
                return rowCardRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CardDataTable cln = ((CardDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CardDataTable();
            }
            
            internal void InitVars() {
                this.columnCard_Id = this.Columns["Card_Id"];
            }
            
            private void InitClass() {
                this.columnCard_Id = new DataColumn("Card_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCard_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCard_Id}, true));
                this.columnCard_Id.AutoIncrement = true;
                this.columnCard_Id.AllowDBNull = false;
                this.columnCard_Id.Unique = true;
            }
            
            public CardRow NewCardRow() {
                return ((CardRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CardRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CardRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CardRowChanged != null)) {
                    this.CardRowChanged(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CardRowChanging != null)) {
                    this.CardRowChanging(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CardRowDeleted != null)) {
                    this.CardRowDeleted(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CardRowDeleting != null)) {
                    this.CardRowDeleting(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCardRow(CardRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CardRow : DataRow {
            
            private CardDataTable tableCard;
            
            internal CardRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCard = ((CardDataTable)(this.Table));
            }
            
            public CardSlotRow[] GetCardSlotRows() {
                return ((CardSlotRow[])(this.GetChildRows(this.Table.ChildRelations["Card_CardSlot"])));
            }
            
            public DisplayRow[] GetDisplayRows() {
                return ((DisplayRow[])(this.GetChildRows(this.Table.ChildRelations["Card_Display"])));
            }
            
            public EngineRow[] GetEngineRows() {
                return ((EngineRow[])(this.GetChildRows(this.Table.ChildRelations["Card_Engine"])));
            }
            
            public MemoryRow[] GetMemoryRows() {
                return ((MemoryRow[])(this.GetChildRows(this.Table.ChildRelations["Card_Memory"])));
            }
            
            public ProgramRow[] GetProgramRows() {
                return ((ProgramRow[])(this.GetChildRows(this.Table.ChildRelations["Card_Program"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CardRowChangeEvent : EventArgs {
            
            private CardRow eventRow;
            
            private DataRowAction eventAction;
            
            public CardRowChangeEvent(CardRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CardRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CardSlotDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFont;
            
            private DataColumn columnLargeFont;
            
            private DataColumn columnTitle;
            
            private DataColumn columnMargin;
            
            private DataColumn columnTextBoxWidth;
            
            private DataColumn columnIsRichText;
            
            private DataColumn columnCardSlot_Id;
            
            private DataColumn columnCard_Id;
            
            internal CardSlotDataTable() : 
                    base("CardSlot") {
                this.InitClass();
            }
            
            internal CardSlotDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FontColumn {
                get {
                    return this.columnFont;
                }
            }
            
            internal DataColumn LargeFontColumn {
                get {
                    return this.columnLargeFont;
                }
            }
            
            internal DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal DataColumn MarginColumn {
                get {
                    return this.columnMargin;
                }
            }
            
            internal DataColumn TextBoxWidthColumn {
                get {
                    return this.columnTextBoxWidth;
                }
            }
            
            internal DataColumn IsRichTextColumn {
                get {
                    return this.columnIsRichText;
                }
            }
            
            internal DataColumn CardSlot_IdColumn {
                get {
                    return this.columnCardSlot_Id;
                }
            }
            
            internal DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            public CardSlotRow this[int index] {
                get {
                    return ((CardSlotRow)(this.Rows[index]));
                }
            }
            
            public event CardSlotRowChangeEventHandler CardSlotRowChanged;
            
            public event CardSlotRowChangeEventHandler CardSlotRowChanging;
            
            public event CardSlotRowChangeEventHandler CardSlotRowDeleted;
            
            public event CardSlotRowChangeEventHandler CardSlotRowDeleting;
            
            public void AddCardSlotRow(CardSlotRow row) {
                this.Rows.Add(row);
            }
            
            public CardSlotRow AddCardSlotRow(string Font, string LargeFont, string Title, int Margin, int TextBoxWidth, bool IsRichText, CardRow parentCardRowByCard_CardSlot) {
                CardSlotRow rowCardSlotRow = ((CardSlotRow)(this.NewRow()));
                rowCardSlotRow.ItemArray = new object[] {
                        Font,
                        LargeFont,
                        Title,
                        Margin,
                        TextBoxWidth,
                        IsRichText,
                        null,
                        parentCardRowByCard_CardSlot[0]};
                this.Rows.Add(rowCardSlotRow);
                return rowCardSlotRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CardSlotDataTable cln = ((CardSlotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CardSlotDataTable();
            }
            
            internal void InitVars() {
                this.columnFont = this.Columns["Font"];
                this.columnLargeFont = this.Columns["LargeFont"];
                this.columnTitle = this.Columns["Title"];
                this.columnMargin = this.Columns["Margin"];
                this.columnTextBoxWidth = this.Columns["TextBoxWidth"];
                this.columnIsRichText = this.Columns["IsRichText"];
                this.columnCardSlot_Id = this.Columns["CardSlot_Id"];
                this.columnCard_Id = this.Columns["Card_Id"];
            }
            
            private void InitClass() {
                this.columnFont = new DataColumn("Font", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFont);
                this.columnLargeFont = new DataColumn("LargeFont", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLargeFont);
                this.columnTitle = new DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnMargin = new DataColumn("Margin", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMargin);
                this.columnTextBoxWidth = new DataColumn("TextBoxWidth", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTextBoxWidth);
                this.columnIsRichText = new DataColumn("IsRichText", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsRichText);
                this.columnCardSlot_Id = new DataColumn("CardSlot_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCardSlot_Id);
                this.columnCard_Id = new DataColumn("Card_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCard_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCardSlot_Id}, true));
                this.columnFont.AllowDBNull = false;
                this.columnLargeFont.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
                this.columnMargin.AllowDBNull = false;
                this.columnTextBoxWidth.AllowDBNull = false;
                this.columnIsRichText.AllowDBNull = false;
                this.columnCardSlot_Id.AutoIncrement = true;
                this.columnCardSlot_Id.AllowDBNull = false;
                this.columnCardSlot_Id.Unique = true;
            }
            
            public CardSlotRow NewCardSlotRow() {
                return ((CardSlotRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CardSlotRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CardSlotRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CardSlotRowChanged != null)) {
                    this.CardSlotRowChanged(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CardSlotRowChanging != null)) {
                    this.CardSlotRowChanging(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CardSlotRowDeleted != null)) {
                    this.CardSlotRowDeleted(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CardSlotRowDeleting != null)) {
                    this.CardSlotRowDeleting(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCardSlotRow(CardSlotRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CardSlotRow : DataRow {
            
            private CardSlotDataTable tableCardSlot;
            
            internal CardSlotRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCardSlot = ((CardSlotDataTable)(this.Table));
            }
            
            public string Font {
                get {
                    return ((string)(this[this.tableCardSlot.FontColumn]));
                }
                set {
                    this[this.tableCardSlot.FontColumn] = value;
                }
            }
            
            public string LargeFont {
                get {
                    return ((string)(this[this.tableCardSlot.LargeFontColumn]));
                }
                set {
                    this[this.tableCardSlot.LargeFontColumn] = value;
                }
            }
            
            public string Title {
                get {
                    return ((string)(this[this.tableCardSlot.TitleColumn]));
                }
                set {
                    this[this.tableCardSlot.TitleColumn] = value;
                }
            }
            
            public int Margin {
                get {
                    return ((int)(this[this.tableCardSlot.MarginColumn]));
                }
                set {
                    this[this.tableCardSlot.MarginColumn] = value;
                }
            }
            
            public int TextBoxWidth {
                get {
                    return ((int)(this[this.tableCardSlot.TextBoxWidthColumn]));
                }
                set {
                    this[this.tableCardSlot.TextBoxWidthColumn] = value;
                }
            }
            
            public bool IsRichText {
                get {
                    return ((bool)(this[this.tableCardSlot.IsRichTextColumn]));
                }
                set {
                    this[this.tableCardSlot.IsRichTextColumn] = value;
                }
            }
            
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_CardSlot"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_CardSlot"]);
                }
            }
            
            public TextBoxRow[] GetTextBoxRows() {
                return ((TextBoxRow[])(this.GetChildRows(this.Table.ChildRelations["CardSlot_TextBox"])));
            }
            
            public RTFBoxRow[] GetRTFBoxRows() {
                return ((RTFBoxRow[])(this.GetChildRows(this.Table.ChildRelations["CardSlot_RTFBox"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CardSlotRowChangeEvent : EventArgs {
            
            private CardSlotRow eventRow;
            
            private DataRowAction eventAction;
            
            public CardSlotRowChangeEvent(CardSlotRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CardSlotRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TextBoxDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnCardSlot_Id;
            
            internal TextBoxDataTable() : 
                    base("TextBox") {
                this.InitClass();
            }
            
            internal TextBoxDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn CardSlot_IdColumn {
                get {
                    return this.columnCardSlot_Id;
                }
            }
            
            public TextBoxRow this[int index] {
                get {
                    return ((TextBoxRow)(this.Rows[index]));
                }
            }
            
            public event TextBoxRowChangeEventHandler TextBoxRowChanged;
            
            public event TextBoxRowChangeEventHandler TextBoxRowChanging;
            
            public event TextBoxRowChangeEventHandler TextBoxRowDeleted;
            
            public event TextBoxRowChangeEventHandler TextBoxRowDeleting;
            
            public void AddTextBoxRow(TextBoxRow row) {
                this.Rows.Add(row);
            }
            
            public TextBoxRow AddTextBoxRow(string Text, CardSlotRow parentCardSlotRowByCardSlot_TextBox) {
                TextBoxRow rowTextBoxRow = ((TextBoxRow)(this.NewRow()));
                rowTextBoxRow.ItemArray = new object[] {
                        Text,
                        parentCardSlotRowByCardSlot_TextBox[6]};
                this.Rows.Add(rowTextBoxRow);
                return rowTextBoxRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TextBoxDataTable cln = ((TextBoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TextBoxDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnCardSlot_Id = this.Columns["CardSlot_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnText);
                this.columnCardSlot_Id = new DataColumn("CardSlot_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCardSlot_Id);
                this.columnText.AllowDBNull = false;
            }
            
            public TextBoxRow NewTextBoxRow() {
                return ((TextBoxRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TextBoxRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TextBoxRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TextBoxRowChanged != null)) {
                    this.TextBoxRowChanged(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TextBoxRowChanging != null)) {
                    this.TextBoxRowChanging(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TextBoxRowDeleted != null)) {
                    this.TextBoxRowDeleted(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TextBoxRowDeleting != null)) {
                    this.TextBoxRowDeleting(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTextBoxRow(TextBoxRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TextBoxRow : DataRow {
            
            private TextBoxDataTable tableTextBox;
            
            internal TextBoxRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTextBox = ((TextBoxDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableTextBox.TextColumn]));
                }
                set {
                    this[this.tableTextBox.TextColumn] = value;
                }
            }
            
            public CardSlotRow CardSlotRow {
                get {
                    return ((CardSlotRow)(this.GetParentRow(this.Table.ParentRelations["CardSlot_TextBox"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CardSlot_TextBox"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TextBoxRowChangeEvent : EventArgs {
            
            private TextBoxRow eventRow;
            
            private DataRowAction eventAction;
            
            public TextBoxRowChangeEvent(TextBoxRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TextBoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RTFBoxDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRTF;
            
            private DataColumn columnCardSlot_Id;
            
            internal RTFBoxDataTable() : 
                    base("RTFBox") {
                this.InitClass();
            }
            
            internal RTFBoxDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RTFColumn {
                get {
                    return this.columnRTF;
                }
            }
            
            internal DataColumn CardSlot_IdColumn {
                get {
                    return this.columnCardSlot_Id;
                }
            }
            
            public RTFBoxRow this[int index] {
                get {
                    return ((RTFBoxRow)(this.Rows[index]));
                }
            }
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowChanged;
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowChanging;
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowDeleted;
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowDeleting;
            
            public void AddRTFBoxRow(RTFBoxRow row) {
                this.Rows.Add(row);
            }
            
            public RTFBoxRow AddRTFBoxRow(string RTF, CardSlotRow parentCardSlotRowByCardSlot_RTFBox) {
                RTFBoxRow rowRTFBoxRow = ((RTFBoxRow)(this.NewRow()));
                rowRTFBoxRow.ItemArray = new object[] {
                        RTF,
                        parentCardSlotRowByCardSlot_RTFBox[6]};
                this.Rows.Add(rowRTFBoxRow);
                return rowRTFBoxRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RTFBoxDataTable cln = ((RTFBoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RTFBoxDataTable();
            }
            
            internal void InitVars() {
                this.columnRTF = this.Columns["RTF"];
                this.columnCardSlot_Id = this.Columns["CardSlot_Id"];
            }
            
            private void InitClass() {
                this.columnRTF = new DataColumn("RTF", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRTF);
                this.columnCardSlot_Id = new DataColumn("CardSlot_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCardSlot_Id);
                this.columnRTF.AllowDBNull = false;
            }
            
            public RTFBoxRow NewRTFBoxRow() {
                return ((RTFBoxRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RTFBoxRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RTFBoxRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RTFBoxRowChanged != null)) {
                    this.RTFBoxRowChanged(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RTFBoxRowChanging != null)) {
                    this.RTFBoxRowChanging(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RTFBoxRowDeleted != null)) {
                    this.RTFBoxRowDeleted(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RTFBoxRowDeleting != null)) {
                    this.RTFBoxRowDeleting(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRTFBoxRow(RTFBoxRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RTFBoxRow : DataRow {
            
            private RTFBoxDataTable tableRTFBox;
            
            internal RTFBoxRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRTFBox = ((RTFBoxDataTable)(this.Table));
            }
            
            public string RTF {
                get {
                    return ((string)(this[this.tableRTFBox.RTFColumn]));
                }
                set {
                    this[this.tableRTFBox.RTFColumn] = value;
                }
            }
            
            public CardSlotRow CardSlotRow {
                get {
                    return ((CardSlotRow)(this.GetParentRow(this.Table.ParentRelations["CardSlot_RTFBox"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CardSlot_RTFBox"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RTFBoxRowChangeEvent : EventArgs {
            
            private RTFBoxRow eventRow;
            
            private DataRowAction eventAction;
            
            public RTFBoxRowChangeEvent(RTFBoxRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RTFBoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DisplayDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFormat;
            
            private DataColumn columnDigits;
            
            private DataColumn columnCard_Id;
            
            internal DisplayDataTable() : 
                    base("Display") {
                this.InitClass();
            }
            
            internal DisplayDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FormatColumn {
                get {
                    return this.columnFormat;
                }
            }
            
            internal DataColumn DigitsColumn {
                get {
                    return this.columnDigits;
                }
            }
            
            internal DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            public DisplayRow this[int index] {
                get {
                    return ((DisplayRow)(this.Rows[index]));
                }
            }
            
            public event DisplayRowChangeEventHandler DisplayRowChanged;
            
            public event DisplayRowChangeEventHandler DisplayRowChanging;
            
            public event DisplayRowChangeEventHandler DisplayRowDeleted;
            
            public event DisplayRowChangeEventHandler DisplayRowDeleting;
            
            public void AddDisplayRow(DisplayRow row) {
                this.Rows.Add(row);
            }
            
            public DisplayRow AddDisplayRow(string Format, short Digits, CardRow parentCardRowByCard_Display) {
                DisplayRow rowDisplayRow = ((DisplayRow)(this.NewRow()));
                rowDisplayRow.ItemArray = new object[] {
                        Format,
                        Digits,
                        parentCardRowByCard_Display[0]};
                this.Rows.Add(rowDisplayRow);
                return rowDisplayRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DisplayDataTable cln = ((DisplayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DisplayDataTable();
            }
            
            internal void InitVars() {
                this.columnFormat = this.Columns["Format"];
                this.columnDigits = this.Columns["Digits"];
                this.columnCard_Id = this.Columns["Card_Id"];
            }
            
            private void InitClass() {
                this.columnFormat = new DataColumn("Format", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFormat);
                this.columnDigits = new DataColumn("Digits", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDigits);
                this.columnCard_Id = new DataColumn("Card_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCard_Id);
                this.columnFormat.AllowDBNull = false;
                this.columnDigits.AllowDBNull = false;
            }
            
            public DisplayRow NewDisplayRow() {
                return ((DisplayRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DisplayRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DisplayRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DisplayRowChanged != null)) {
                    this.DisplayRowChanged(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DisplayRowChanging != null)) {
                    this.DisplayRowChanging(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DisplayRowDeleted != null)) {
                    this.DisplayRowDeleted(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DisplayRowDeleting != null)) {
                    this.DisplayRowDeleting(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDisplayRow(DisplayRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DisplayRow : DataRow {
            
            private DisplayDataTable tableDisplay;
            
            internal DisplayRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDisplay = ((DisplayDataTable)(this.Table));
            }
            
            public string Format {
                get {
                    return ((string)(this[this.tableDisplay.FormatColumn]));
                }
                set {
                    this[this.tableDisplay.FormatColumn] = value;
                }
            }
            
            public short Digits {
                get {
                    return ((short)(this[this.tableDisplay.DigitsColumn]));
                }
                set {
                    this[this.tableDisplay.DigitsColumn] = value;
                }
            }
            
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Display"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Display"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DisplayRowChangeEvent : EventArgs {
            
            private DisplayRow eventRow;
            
            private DataRowAction eventAction;
            
            public DisplayRowChangeEvent(DisplayRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DisplayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EngineDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAngleUnit;
            
            private DataColumn columnEngine_Id;
            
            private DataColumn columnCard_Id;
            
            internal EngineDataTable() : 
                    base("Engine") {
                this.InitClass();
            }
            
            internal EngineDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AngleUnitColumn {
                get {
                    return this.columnAngleUnit;
                }
            }
            
            internal DataColumn Engine_IdColumn {
                get {
                    return this.columnEngine_Id;
                }
            }
            
            internal DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            public EngineRow this[int index] {
                get {
                    return ((EngineRow)(this.Rows[index]));
                }
            }
            
            public event EngineRowChangeEventHandler EngineRowChanged;
            
            public event EngineRowChangeEventHandler EngineRowChanging;
            
            public event EngineRowChangeEventHandler EngineRowDeleted;
            
            public event EngineRowChangeEventHandler EngineRowDeleting;
            
            public void AddEngineRow(EngineRow row) {
                this.Rows.Add(row);
            }
            
            public EngineRow AddEngineRow(string AngleUnit, CardRow parentCardRowByCard_Engine) {
                EngineRow rowEngineRow = ((EngineRow)(this.NewRow()));
                rowEngineRow.ItemArray = new object[] {
                        AngleUnit,
                        null,
                        parentCardRowByCard_Engine[0]};
                this.Rows.Add(rowEngineRow);
                return rowEngineRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EngineDataTable cln = ((EngineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EngineDataTable();
            }
            
            internal void InitVars() {
                this.columnAngleUnit = this.Columns["AngleUnit"];
                this.columnEngine_Id = this.Columns["Engine_Id"];
                this.columnCard_Id = this.Columns["Card_Id"];
            }
            
            private void InitClass() {
                this.columnAngleUnit = new DataColumn("AngleUnit", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAngleUnit);
                this.columnEngine_Id = new DataColumn("Engine_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnEngine_Id);
                this.columnCard_Id = new DataColumn("Card_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCard_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnEngine_Id}, true));
                this.columnAngleUnit.AllowDBNull = false;
                this.columnEngine_Id.AutoIncrement = true;
                this.columnEngine_Id.AllowDBNull = false;
                this.columnEngine_Id.Unique = true;
            }
            
            public EngineRow NewEngineRow() {
                return ((EngineRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EngineRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EngineRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EngineRowChanged != null)) {
                    this.EngineRowChanged(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EngineRowChanging != null)) {
                    this.EngineRowChanging(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EngineRowDeleted != null)) {
                    this.EngineRowDeleted(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EngineRowDeleting != null)) {
                    this.EngineRowDeleting(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEngineRow(EngineRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EngineRow : DataRow {
            
            private EngineDataTable tableEngine;
            
            internal EngineRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEngine = ((EngineDataTable)(this.Table));
            }
            
            public string AngleUnit {
                get {
                    return ((string)(this[this.tableEngine.AngleUnitColumn]));
                }
                set {
                    this[this.tableEngine.AngleUnitColumn] = value;
                }
            }
            
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Engine"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Engine"]);
                }
            }
            
            public FlagRow[] GetFlagRows() {
                return ((FlagRow[])(this.GetChildRows(this.Table.ChildRelations["Engine_Flag"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EngineRowChangeEvent : EventArgs {
            
            private EngineRow eventRow;
            
            private DataRowAction eventAction;
            
            public EngineRowChangeEvent(EngineRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EngineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FlagDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnValue;
            
            private DataColumn columnEngine_Id;
            
            internal FlagDataTable() : 
                    base("Flag") {
                this.InitClass();
            }
            
            internal FlagDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn Engine_IdColumn {
                get {
                    return this.columnEngine_Id;
                }
            }
            
            public FlagRow this[int index] {
                get {
                    return ((FlagRow)(this.Rows[index]));
                }
            }
            
            public event FlagRowChangeEventHandler FlagRowChanged;
            
            public event FlagRowChangeEventHandler FlagRowChanging;
            
            public event FlagRowChangeEventHandler FlagRowDeleted;
            
            public event FlagRowChangeEventHandler FlagRowDeleting;
            
            public void AddFlagRow(FlagRow row) {
                this.Rows.Add(row);
            }
            
            public FlagRow AddFlagRow(short Id, bool Value, EngineRow parentEngineRowByEngine_Flag) {
                FlagRow rowFlagRow = ((FlagRow)(this.NewRow()));
                rowFlagRow.ItemArray = new object[] {
                        Id,
                        Value,
                        parentEngineRowByEngine_Flag[1]};
                this.Rows.Add(rowFlagRow);
                return rowFlagRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FlagDataTable cln = ((FlagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FlagDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnValue = this.Columns["Value"];
                this.columnEngine_Id = this.Columns["Engine_Id"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnValue = new DataColumn("Value", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnEngine_Id = new DataColumn("Engine_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnEngine_Id);
                this.columnId.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
            }
            
            public FlagRow NewFlagRow() {
                return ((FlagRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FlagRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FlagRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlagRowChanged != null)) {
                    this.FlagRowChanged(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlagRowChanging != null)) {
                    this.FlagRowChanging(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlagRowDeleted != null)) {
                    this.FlagRowDeleted(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlagRowDeleting != null)) {
                    this.FlagRowDeleting(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFlagRow(FlagRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FlagRow : DataRow {
            
            private FlagDataTable tableFlag;
            
            internal FlagRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlag = ((FlagDataTable)(this.Table));
            }
            
            public short Id {
                get {
                    return ((short)(this[this.tableFlag.IdColumn]));
                }
                set {
                    this[this.tableFlag.IdColumn] = value;
                }
            }
            
            public bool Value {
                get {
                    return ((bool)(this[this.tableFlag.ValueColumn]));
                }
                set {
                    this[this.tableFlag.ValueColumn] = value;
                }
            }
            
            public EngineRow EngineRow {
                get {
                    return ((EngineRow)(this.GetParentRow(this.Table.ParentRelations["Engine_Flag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Engine_Flag"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FlagRowChangeEvent : EventArgs {
            
            private FlagRow eventRow;
            
            private DataRowAction eventAction;
            
            public FlagRowChangeEvent(FlagRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FlagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MemoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnValue;
            
            private DataColumn columnCard_Id;
            
            internal MemoryDataTable() : 
                    base("Memory") {
                this.InitClass();
            }
            
            internal MemoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            public MemoryRow this[int index] {
                get {
                    return ((MemoryRow)(this.Rows[index]));
                }
            }
            
            public event MemoryRowChangeEventHandler MemoryRowChanged;
            
            public event MemoryRowChangeEventHandler MemoryRowChanging;
            
            public event MemoryRowChangeEventHandler MemoryRowDeleted;
            
            public event MemoryRowChangeEventHandler MemoryRowDeleting;
            
            public void AddMemoryRow(MemoryRow row) {
                this.Rows.Add(row);
            }
            
            public MemoryRow AddMemoryRow(short Id, System.Double Value, CardRow parentCardRowByCard_Memory) {
                MemoryRow rowMemoryRow = ((MemoryRow)(this.NewRow()));
                rowMemoryRow.ItemArray = new object[] {
                        Id,
                        Value,
                        parentCardRowByCard_Memory[0]};
                this.Rows.Add(rowMemoryRow);
                return rowMemoryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MemoryDataTable cln = ((MemoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MemoryDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnValue = this.Columns["Value"];
                this.columnCard_Id = this.Columns["Card_Id"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnValue = new DataColumn("Value", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnCard_Id = new DataColumn("Card_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCard_Id);
                this.columnId.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
            }
            
            public MemoryRow NewMemoryRow() {
                return ((MemoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MemoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MemoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MemoryRowChanged != null)) {
                    this.MemoryRowChanged(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MemoryRowChanging != null)) {
                    this.MemoryRowChanging(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MemoryRowDeleted != null)) {
                    this.MemoryRowDeleted(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MemoryRowDeleting != null)) {
                    this.MemoryRowDeleting(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMemoryRow(MemoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MemoryRow : DataRow {
            
            private MemoryDataTable tableMemory;
            
            internal MemoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMemory = ((MemoryDataTable)(this.Table));
            }
            
            public short Id {
                get {
                    return ((short)(this[this.tableMemory.IdColumn]));
                }
                set {
                    this[this.tableMemory.IdColumn] = value;
                }
            }
            
            public System.Double Value {
                get {
                    return ((System.Double)(this[this.tableMemory.ValueColumn]));
                }
                set {
                    this[this.tableMemory.ValueColumn] = value;
                }
            }
            
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Memory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Memory"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MemoryRowChangeEvent : EventArgs {
            
            private MemoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public MemoryRowChangeEvent(MemoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MemoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProgramDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnInstruction;
            
            private DataColumn columnCard_Id;
            
            internal ProgramDataTable() : 
                    base("Program") {
                this.InitClass();
            }
            
            internal ProgramDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn InstructionColumn {
                get {
                    return this.columnInstruction;
                }
            }
            
            internal DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            public ProgramRow this[int index] {
                get {
                    return ((ProgramRow)(this.Rows[index]));
                }
            }
            
            public event ProgramRowChangeEventHandler ProgramRowChanged;
            
            public event ProgramRowChangeEventHandler ProgramRowChanging;
            
            public event ProgramRowChangeEventHandler ProgramRowDeleted;
            
            public event ProgramRowChangeEventHandler ProgramRowDeleting;
            
            public void AddProgramRow(ProgramRow row) {
                this.Rows.Add(row);
            }
            
            public ProgramRow AddProgramRow(short Id, string Instruction, CardRow parentCardRowByCard_Program) {
                ProgramRow rowProgramRow = ((ProgramRow)(this.NewRow()));
                rowProgramRow.ItemArray = new object[] {
                        Id,
                        Instruction,
                        parentCardRowByCard_Program[0]};
                this.Rows.Add(rowProgramRow);
                return rowProgramRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProgramDataTable cln = ((ProgramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProgramDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnInstruction = this.Columns["Instruction"];
                this.columnCard_Id = this.Columns["Card_Id"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnInstruction = new DataColumn("Instruction", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInstruction);
                this.columnCard_Id = new DataColumn("Card_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCard_Id);
                this.columnId.AllowDBNull = false;
                this.columnInstruction.AllowDBNull = false;
            }
            
            public ProgramRow NewProgramRow() {
                return ((ProgramRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProgramRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProgramRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProgramRowChanged != null)) {
                    this.ProgramRowChanged(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProgramRowChanging != null)) {
                    this.ProgramRowChanging(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProgramRowDeleted != null)) {
                    this.ProgramRowDeleted(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProgramRowDeleting != null)) {
                    this.ProgramRowDeleting(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProgramRow(ProgramRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProgramRow : DataRow {
            
            private ProgramDataTable tableProgram;
            
            internal ProgramRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProgram = ((ProgramDataTable)(this.Table));
            }
            
            public short Id {
                get {
                    return ((short)(this[this.tableProgram.IdColumn]));
                }
                set {
                    this[this.tableProgram.IdColumn] = value;
                }
            }
            
            public string Instruction {
                get {
                    return ((string)(this[this.tableProgram.InstructionColumn]));
                }
                set {
                    this[this.tableProgram.InstructionColumn] = value;
                }
            }
            
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Program"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Program"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProgramRowChangeEvent : EventArgs {
            
            private ProgramRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProgramRowChangeEvent(ProgramRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProgramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
