// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace User_Interface_Testing
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Launch - Use 'LaunchParams' to pass parameters into this method.
        /// </summary>
        public void Launch()
        {

            // Launch 'C:\Users\phl\Projects\Mockingbird\HP\HP97\bin\Debug\Mockingbird.HP.HP97.exe'
            ApplicationUnderTest mockingbirdHPHP97Application = ApplicationUnderTest.Launch(this.LaunchParams.ExePath, this.LaunchParams.AlternateExePath);
        }
        
        /// <summary>
        /// Zero
        /// </summary>
        public void Zero()
        {
            #region Variable Declarations
            WinButton uIItem0Button = this.UIHP97Window.UIItem0Window.UIItem0Button;
            #endregion

            // Click '0' button
            Mouse.Click(uIItem0Button, new Point(88, 8));
        }
        
        /// <summary>
        /// One
        /// </summary>
        public void One()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UIHP97Window.UIItem1Window.UIItem1Button;
            #endregion

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(44, 16));
        }
        
        /// <summary>
        /// Two
        /// </summary>
        public void Two()
        {
            #region Variable Declarations
            WinButton uIItem2Button = this.UIHP97Window.UIItem2Window.UIItem2Button;
            #endregion

            // Click '2' button
            Mouse.Click(uIItem2Button, new Point(31, 11));
        }
        
        /// <summary>
        /// Three
        /// </summary>
        public void Three()
        {
            #region Variable Declarations
            WinButton uIItem3Button = this.UIHP97Window.UIItem3Window.UIItem3Button;
            #endregion

            // Click '3' button
            Mouse.Click(uIItem3Button, new Point(29, 13));
        }
        
        /// <summary>
        /// Four
        /// </summary>
        public void Four()
        {
            #region Variable Declarations
            WinButton uIItem4Button = this.UIHP97Window.UIItem4Window.UIItem4Button;
            #endregion

            // Click '4' button
            Mouse.Click(uIItem4Button, new Point(37, 14));
        }
        
        /// <summary>
        /// Five
        /// </summary>
        public void Five()
        {
            #region Variable Declarations
            WinButton uIItem5Button = this.UIHP97Window.UIItem5Window.UIItem5Button;
            #endregion

            // Click '5' button
            Mouse.Click(uIItem5Button, new Point(25, 12));
        }
        
        /// <summary>
        /// Six
        /// </summary>
        public void Six()
        {
            #region Variable Declarations
            WinButton uIItem6Button = this.UIHP97Window.UIItem6Window.UIItem6Button;
            #endregion

            // Click '6' button
            Mouse.Click(uIItem6Button, new Point(17, 18));
        }
        
        /// <summary>
        /// Seven
        /// </summary>
        public void Seven()
        {
            #region Variable Declarations
            WinButton uIItem7Button = this.UIHP97Window.UIItem7Window.UIItem7Button;
            #endregion

            // Click '7' button
            Mouse.Click(uIItem7Button, new Point(25, 11));
        }
        
        /// <summary>
        /// Eight
        /// </summary>
        public void Eight()
        {
            #region Variable Declarations
            WinButton uIItem8Button = this.UIHP97Window.UIItem8Window.UIItem8Button;
            #endregion

            // Click '8' button
            Mouse.Click(uIItem8Button, new Point(25, 11));
        }
        
        /// <summary>
        /// Nine
        /// </summary>
        public void Nine()
        {
            #region Variable Declarations
            WinButton uIItem9Button = this.UIHP97Window.UIItem9Window.UIItem9Button;
            #endregion

            // Click '9' button
            Mouse.Click(uIItem9Button, new Point(37, 7));
        }
        
        /// <summary>
        /// Period
        /// </summary>
        public void Period()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UIHP97Window.UIItemWindow.UIItemButton;
            #endregion

            // Click '・' button
            Mouse.Click(uIItemButton, new Point(33, 18));
        }
        
        /// <summary>
        /// Division
        /// </summary>
        public void Division()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UIHP97Window.UIItemWindow1.UIItemButton;
            #endregion

            // Click '÷' button
            Mouse.Click(uIItemButton, new Point(15, 13));
        }
        
        /// <summary>
        /// Multiplication
        /// </summary>
        public void Multiplication()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UIHP97Window.UIItemWindow2.UIItemButton;
            #endregion

            // Click '×' button
            Mouse.Click(uIItemButton, new Point(31, 26));
        }
        
        /// <summary>
        /// Subtraction
        /// </summary>
        public void Subtraction()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UIHP97Window.UIItemWindow3.UIItemButton;
            #endregion

            // Click '-' button
            Mouse.Click(uIItemButton, new Point(23, 23));
        }
        
        /// <summary>
        /// Addition
        /// </summary>
        public void Addition()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UIHP97Window.UIItemWindow4.UIItemButton;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(39, 70));
        }
        
        /// <summary>
        /// ENTER
        /// </summary>
        public void ENTER()
        {
            #region Variable Declarations
            WinButton uIENTERButton = this.UIHP97Window.UIENTERWindow.UIENTERButton;
            #endregion

            // Click 'ENTER ↑' button
            Mouse.Click(uIENTERButton, new Point(73, 11));
        }
        
        /// <summary>
        /// ManTraceNorm2Left
        /// </summary>
        public void ManTraceNorm2Left()
        {
            #region Variable Declarations
            WinButton uINORMButton = this.UIHP97Window.UIButtonWindow.UINORMButton;
            WinText uIMANText = this.UIHP97Window.UIMANWindow.UIMANText;
            #endregion

            // Move 'NORM' button from (9, 5) to 'MAN' label (55, 3)
            uIMANText.EnsureClickable(new Point(55, 3));
            Mouse.StartDragging(uINORMButton, new Point(9, 5));
            Mouse.StopDragging(uIMANText, new Point(55, 3));
        }
        
        /// <summary>
        /// ManTraceNorm2Right
        /// </summary>
        public void ManTraceNorm2Right()
        {
            #region Variable Declarations
            WinButton uINORMButton = this.UIHP97Window.UIButtonWindow.UINORMButton;
            WinText uINORMText = this.UIHP97Window.UINORMWindow.UINORMText;
            #endregion

            // Move 'NORM' button from (15, 1) to 'NORM' label (5, 5)
            uINORMText.EnsureClickable(new Point(5, 5));
            Mouse.StartDragging(uINORMButton, new Point(15, 1));
            Mouse.StopDragging(uINORMText, new Point(5, 5));
        }
        
        /// <summary>
        /// Square
        /// </summary>
        public void Square()
        {
            #region Variable Declarations
            WinButton uIXButton = this.UIHP97Window.UIXWindow.UIXButton;
            #endregion

            // Click 'x²' button
            Mouse.Click(uIXButton, new Point(15, 12));
        }
        
        /// <summary>
        /// Close
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIHP97Window.UIHP97TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(8, 8));
        }
        
        /// <summary>
        /// AssertNumeric - Use 'AssertNumericExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNumeric()
        {
            #region Variable Declarations
            WinEdit uINumericTextBoxEdit = this.UIHP97Window.UIItem000Window.UINumericTextBoxEdit;
            #endregion

            // Verify that 'numericTextBox' text box's property 'Text' equals ''
            Assert.AreEqual(this.AssertNumericExpectedValues.UINumericTextBoxEditText, uINumericTextBoxEdit.Text);
        }
        
        /// <summary>
        /// f
        /// </summary>
        public void f()
        {
            #region Variable Declarations
            WinButton uIFButton = this.UIHP97Window.UIFWindow.UIFButton;
            #endregion

            // Click 'f' button
            Mouse.Click(uIFButton, new Point(24, 10));
        }
        
        /// <summary>
        /// SIN
        /// </summary>
        public void SIN()
        {
            #region Variable Declarations
            WinButton uISINButton = this.UIHP97Window.UISINWindow.UISINButton;
            #endregion

            // Click 'SIN' button
            Mouse.Click(uISINButton, new Point(29, 17));
        }
        
        /// <summary>
        /// Reciprocal
        /// </summary>
        public void Reciprocal()
        {
            #region Variable Declarations
            WinButton uIItem1xButton = this.UIHP97Window.UIItem1xWindow.UIItem1xButton;
            #endregion

            // Click '1/x' button
            Mouse.Click(uIItem1xButton, new Point(23, 19));
        }
        
        /// <summary>
        /// PRINTx
        /// </summary>
        public void PRINTx()
        {
            #region Variable Declarations
            WinButton uIPRINTxButton = this.UIHP97Window.UIPRINTxWindow.UIPRINTxButton;
            #endregion

            // Click 'PRINT x' button
            Mouse.Click(uIPRINTxButton, new Point(65, 13));
        }
        
        /// <summary>
        /// ZeroZero
        /// </summary>
        public void ZeroZero()
        {
            #region Variable Declarations
            WinButton uIItem0Button = this.UIHP97Window.UIItem0Window.UIItem0Button;
            #endregion

            // Double-Click '0' button
            Mouse.DoubleClick(uIItem0Button, new Point(53, 14));
        }
        
        /// <summary>
        /// CHS
        /// </summary>
        public void CHS()
        {
            #region Variable Declarations
            WinButton uICHSButton = this.UIHP97Window.UICHSWindow.UICHSButton;
            #endregion

            // Click 'CHS' button
            Mouse.Click(uICHSButton, new Point(29, 16));
        }
        
        /// <summary>
        /// OneOne
        /// </summary>
        public void OneOne()
        {
            #region Variable Declarations
            WinButton uIHButtonButton = this.UIHP97Window.UIHButtonWindow.UIHButtonButton;
            #endregion

            // Double-Click 'hButton' button
            Mouse.DoubleClick(uIHButtonButton, new Point(37, 4));
        }
        
        /// <summary>
        /// A
        /// </summary>
        public void A()
        {
            #region Variable Declarations
            WinButton uIAButton = this.UIHP97Window.UIAWindow.UIAButton;
            #endregion

            // Click 'A' button
            Mouse.Click(uIAButton, new Point(22, 14));
        }
        
        /// <summary>
        /// B
        /// </summary>
        public void B()
        {
            #region Variable Declarations
            WinButton uIBButton = this.UIHP97Window.UIBWindow.UIBButton;
            #endregion

            // Click 'B' button
            Mouse.Click(uIBButton, new Point(24, 14));
        }
        
        /// <summary>
        /// C
        /// </summary>
        public void C()
        {
            #region Variable Declarations
            WinButton uICButton = this.UIHP97Window.UICWindow.UICButton;
            #endregion

            // Click 'C' button
            Mouse.Click(uICButton, new Point(30, 10));
        }
        
        /// <summary>
        /// CLx
        /// </summary>
        public void CLx()
        {
            #region Variable Declarations
            WinButton uICLxButton = this.UIHP97Window.UICLxWindow.UICLxButton;
            #endregion

            // Click 'CL x' button
            Mouse.Click(uICLxButton, new Point(33, 19));
        }
        
        /// <summary>
        /// COS
        /// </summary>
        public void COS()
        {
            #region Variable Declarations
            WinButton uICOSButton = this.UIHP97Window.UICOSWindow.UICOSButton;
            #endregion

            // Click 'COS' button
            Mouse.Click(uICOSButton, new Point(13, 15));
        }
        
        /// <summary>
        /// DSP
        /// </summary>
        public void DSP()
        {
            #region Variable Declarations
            WinButton uIDSPButton = this.UIHP97Window.UIDSPWindow.UIDSPButton;
            #endregion

            // Click 'DSP' button
            Mouse.Click(uIDSPButton, new Point(41, 23));
        }
        
        /// <summary>
        /// EEX
        /// </summary>
        public void EEX()
        {
            #region Variable Declarations
            WinButton uIEEXButton = this.UIHP97Window.UIEEXWindow.UIEEXButton;
            #endregion

            // Click 'EEX' button
            Mouse.Click(uIEEXButton, new Point(27, 20));
        }
        
        /// <summary>
        /// ENG
        /// </summary>
        public void ENG()
        {
            #region Variable Declarations
            WinButton uIENGButton = this.UIHP97Window.UIENGWindow.UIENGButton;
            #endregion

            // Click 'ENG' button
            Mouse.Click(uIENGButton, new Point(48, 17));
        }
        
        /// <summary>
        /// Exp
        /// </summary>
        public void Exp()
        {
            #region Variable Declarations
            WinButton uIE̽Button = this.UIHP97Window.UIE̽Window.UIE̽Button;
            #endregion

            // Click 'e ̽' button
            Mouse.Click(uIE̽Button, new Point(28, 9));
        }
        
        /// <summary>
        /// FIX
        /// </summary>
        public void FIX()
        {
            #region Variable Declarations
            WinButton uIFIXButton = this.UIHP97Window.UIFIXWindow.UIFIXButton;
            #endregion

            // Click 'FIX' button
            Mouse.Click(uIFIXButton, new Point(39, 15));
        }
        
        /// <summary>
        /// I
        /// </summary>
        public void I()
        {
            #region Variable Declarations
            WinButton uIIButton = this.UIHP97Window.UIIWindow.UIIButton;
            #endregion

            // Click 'I' button
            Mouse.Click(uIIButton, new Point(27, 15));
        }
        
        /// <summary>
        /// LBL
        /// </summary>
        public void LBL()
        {
            #region Variable Declarations
            WinButton uILBLButton = this.UIHP97Window.UILBLWindow.UILBLButton;
            #endregion

            // Click 'LBL' button
            Mouse.Click(uILBLButton, new Point(29, 13));
        }
        
        /// <summary>
        /// LN
        /// </summary>
        public void LN()
        {
            #region Variable Declarations
            WinButton uILNButton = this.UIHP97Window.UILNWindow.UILNButton;
            #endregion

            // Click 'LN' button
            Mouse.Click(uILNButton, new Point(9, 9));
        }
        
        /// <summary>
        /// Percent
        /// </summary>
        public void Percent()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UIHP97Window.UIItemWindow5.UIItemButton;
            #endregion

            // Click '%' button
            Mouse.Click(uIItemButton, new Point(27, 9));
        }
        
        /// <summary>
        /// PrinterFeedShort
        /// </summary>
        public void PrinterFeedShort()
        {
            #region Variable Declarations
            WinButton uIPrinterFeedButtonButton = this.UIHP97Window.UIPrinterFeedButtonWindow.UIPrinterFeedButtonButton;
            #endregion

            // Click 'printerFeedButton' button
            Mouse.Click(uIPrinterFeedButtonButton, new Point(15, 25));
        }
        
        /// <summary>
        /// PrinterFeedLong
        /// </summary>
        public void PrinterFeedLong()
        {
            #region Variable Declarations
            WinButton uIPrinterFeedButtonButton = this.UIHP97Window.UIPrinterFeedButtonWindow.UIPrinterFeedButtonButton;
            #endregion

            // Click 'printerFeedButton' button
            Mouse.Click(uIPrinterFeedButtonButton, new Point(13, 29));
        }
        
        /// <summary>
        /// RCL
        /// </summary>
        public void RCL()
        {
            #region Variable Declarations
            WinButton uIRCLButton = this.UIHP97Window.UIRCLWindow.UIRCLButton;
            #endregion

            // Click 'RCL' button
            Mouse.Click(uIRCLButton, new Point(13, 11));
        }
        
        /// <summary>
        /// RDown
        /// </summary>
        public void RDown()
        {
            #region Variable Declarations
            WinButton uIRButton = this.UIHP97Window.UIRWindow.UIRButton;
            #endregion

            // Click 'R↓' button
            Mouse.Click(uIRButton, new Point(29, 25));
        }
        
        /// <summary>
        /// RTN
        /// </summary>
        public void RTN()
        {
            #region Variable Declarations
            WinButton uIRTNButton = this.UIHP97Window.UIRTNWindow.UIRTNButton;
            #endregion

            // Click 'RTN' button
            Mouse.Click(uIRTNButton, new Point(21, 13));
        }
        
        /// <summary>
        /// SCI
        /// </summary>
        public void SCI()
        {
            #region Variable Declarations
            WinButton uISCIButton = this.UIHP97Window.UISCIWindow.UISCIButton;
            #endregion

            // Click 'SCI' button
            Mouse.Click(uISCIButton, new Point(37, 9));
        }
        
        /// <summary>
        /// Sqrt
        /// </summary>
        public void Sqrt()
        {
            #region Variable Declarations
            WinButton uIX̅Button = this.UIHP97Window.UIX̅Window.UIX̅Button;
            #endregion

            // Click '√x̅' button
            Mouse.Click(uIX̅Button, new Point(35, 11));
        }
        
        /// <summary>
        /// STO
        /// </summary>
        public void STO()
        {
            #region Variable Declarations
            WinButton uISTOButton = this.UIHP97Window.UISTOWindow.UISTOButton;
            #endregion

            // Click 'STO' button
            Mouse.Click(uISTOButton, new Point(19, 13));
        }
        
        /// <summary>
        /// TAN
        /// </summary>
        public void TAN()
        {
            #region Variable Declarations
            WinButton uITANButton = this.UIHP97Window.UITANWindow.UITANButton;
            #endregion

            // Click 'TAN' button
            Mouse.Click(uITANButton, new Point(21, 7));
        }
        
        /// <summary>
        /// ToggleOffOn
        /// </summary>
        public void ToggleOffOn()
        {
            #region Variable Declarations
            WinButton uIONButton = this.UIHP97Window.UIButtonWindow1.UIONButton;
            #endregion

            // Click 'ON' button
            Mouse.Click(uIONButton, new Point(15, 3));
        }
        
        /// <summary>
        /// TogglePrgmRun
        /// </summary>
        public void TogglePrgmRun()
        {
            #region Variable Declarations
            WinButton uIRUNButton = this.UIHP97Window.UIButtonWindow2.UIRUNButton;
            #endregion

            // Click 'RUN' button
            Mouse.Click(uIRUNButton, new Point(7, 5));
        }
        
        /// <summary>
        /// XExchangeY
        /// </summary>
        public void XExchangeY()
        {
            #region Variable Declarations
            WinButton uIXYButton = this.UIHP97Window.UIXYWindow.UIXYButton;
            #endregion

            // Click 'x⇄y' button
            Mouse.Click(uIXYButton, new Point(33, 14));
        }
        
        /// <summary>
        /// YToTheXth
        /// </summary>
        public void YToTheXth()
        {
            #region Variable Declarations
            WinButton uIY̽Button = this.UIHP97Window.UIY̽Window.UIY̽Button;
            #endregion

            // Click 'y ̽' button
            Mouse.Click(uIY̽Button, new Point(29, 7));
        }
        
        /// <summary>
        /// D - Use 'DParams' to pass parameters into this method.
        /// </summary>
        public void D()
        {
            #region Variable Declarations
            WinClient uIPanelMainClient = this.UIHP97Window.UIPanelMainWindow.UIPanelMainClient;
            WinListItem uIItemListItem4 = this.UIHP97Window.UIListBoxWindow.UIItemListItem4;
            #endregion

            // Click 'panelMain' client
            Mouse.Click(uIPanelMainClient, new Point(369, 369));

            // Type 'd' in 'Unknown Name' list item
            Keyboard.SendKeys(uIItemListItem4, this.DParams.UIItemListItem4SendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// E
        /// </summary>
        public void E()
        {
            #region Variable Declarations
            WinButton uIEButton = this.UIHP97Window.UIEWindow.UIEButton;
            #endregion

            // Click 'E' button
            Mouse.Click(uIEButton, new Point(27, 12));
        }
        
        /// <summary>
        /// EditLabels - Use 'EditLabelsParams' to pass parameters into this method.
        /// </summary>
        public void EditLabels()
        {
            #region Variable Declarations
            WinMenuItem uIEditLabelsMenuItem = this.UIHP97Window.UIMenuStripMenuBar.UIEditMenuItem.UIEditLabelsMenuItem;
            WinEdit uITitleTextBoxEdit = this.UIHP97Window.UITITLEWindow.UITitleTextBoxEdit;
            WinEdit uITextBoxfAEdit = this.UIHP97Window.UIFAWindow.UITextBoxfAEdit;
            WinEdit uITextBoxfBEdit = this.UIHP97Window.UIFBWindow.UITextBoxfBEdit;
            WinEdit uITextBoxfCEdit = this.UIHP97Window.UIFCWindow.UITextBoxfCEdit;
            WinEdit uITextBoxfDEdit = this.UIHP97Window.UIFDWindow.UITextBoxfDEdit;
            WinEdit uITextBoxfEEdit = this.UIHP97Window.UIFEWindow.UITextBoxfEEdit;
            WinEdit uITextBoxAEdit = this.UIHP97Window.UIAWindow1.UITextBoxAEdit;
            WinEdit uITextBoxAEdit1 = this.UIHP97Window.UIAWindow2.UITextBoxAEdit;
            WinEdit uITextBoxBEdit = this.UIHP97Window.UIBWindow1.UITextBoxBEdit;
            WinEdit uITextBoxBEdit1 = this.UIHP97Window.UIBWindow2.UITextBoxBEdit;
            WinEdit uITextBoxCEdit = this.UIHP97Window.UICWindow1.UITextBoxCEdit;
            WinEdit uITextBoxCEdit1 = this.UIHP97Window.UICWindow2.UITextBoxCEdit;
            WinEdit uITextBoxDEdit = this.UIHP97Window.UIDWindow.UITextBoxDEdit;
            WinEdit uITextBoxEEdit = this.UIHP97Window.UIEWindow1.UITextBoxEEdit;
            #endregion

            // Select 'Edit' -> 'Edit Labels' menu item
            uIEditLabelsMenuItem.Checked = this.EditLabelsParams.UIEditLabelsMenuItemChecked;

            // Type 'SPHERE SURFACE AREA' in 'titleTextBox' text box
            uITitleTextBoxEdit.Text = this.EditLabelsParams.UITitleTextBoxEditText;

            // Type '{Tab}' in 'titleTextBox' text box
            Keyboard.SendKeys(uITitleTextBoxEdit, this.EditLabelsParams.UITitleTextBoxEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxfA' text box
            uITextBoxfAEdit.Text = this.EditLabelsParams.UITextBoxfAEditText;

            // Type '{Tab}' in 'textBoxfA' text box
            Keyboard.SendKeys(uITextBoxfAEdit, this.EditLabelsParams.UITextBoxfAEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxfB' text box
            uITextBoxfBEdit.Text = this.EditLabelsParams.UITextBoxfBEditText;

            // Type '{Tab}' in 'textBoxfB' text box
            Keyboard.SendKeys(uITextBoxfBEdit, this.EditLabelsParams.UITextBoxfBEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxfC' text box
            uITextBoxfCEdit.Text = this.EditLabelsParams.UITextBoxfCEditText;

            // Type '{Tab}' in 'textBoxfC' text box
            Keyboard.SendKeys(uITextBoxfCEdit, this.EditLabelsParams.UITextBoxfCEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxfD' text box
            uITextBoxfDEdit.Text = this.EditLabelsParams.UITextBoxfDEditText;

            // Type '{Tab}' in 'textBoxfD' text box
            Keyboard.SendKeys(uITextBoxfDEdit, this.EditLabelsParams.UITextBoxfDEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxfE' text box
            uITextBoxfEEdit.Text = this.EditLabelsParams.UITextBoxfEEditText;

            // Type '{Tab}' in 'textBoxfE' text box
            Keyboard.SendKeys(uITextBoxfEEdit, this.EditLabelsParams.UITextBoxfEEditSendKeys, ModifierKeys.None);

            // Type 'd->A' in 'textBoxA' text box
            uITextBoxAEdit.Text = this.EditLabelsParams.UITextBoxAEditText;

            // Type '{Tab}' in 'textBoxA' text box
            Keyboard.SendKeys(uITextBoxAEdit1, this.EditLabelsParams.UITextBoxAEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxB' text box
            uITextBoxBEdit.Text = this.EditLabelsParams.UITextBoxBEditText;

            // Type '{Tab}' in 'textBoxB' text box
            Keyboard.SendKeys(uITextBoxBEdit1, this.EditLabelsParams.UITextBoxBEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxC' text box
            uITextBoxCEdit.Text = this.EditLabelsParams.UITextBoxCEditText;

            // Type '{Tab}' in 'textBoxC' text box
            Keyboard.SendKeys(uITextBoxCEdit1, this.EditLabelsParams.UITextBoxCEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxD' text box
            uITextBoxDEdit.Text = this.EditLabelsParams.UITextBoxDEditText;

            // Type '{Tab}' in 'textBoxD' text box
            Keyboard.SendKeys(uITextBoxDEdit, this.EditLabelsParams.UITextBoxDEditSendKeys, ModifierKeys.None);

            // Type '' in 'textBoxE' text box
            uITextBoxEEdit.Text = this.EditLabelsParams.UITextBoxEEditText;
        }
        
        /// <summary>
        /// SaveCard - Use 'SaveCardParams' to pass parameters into this method.
        /// </summary>
        public void SaveCard()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UIHP97Window.UIMenuStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIProjectsTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIProjectsTreeItem;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow2.UIMockingbirdListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UISaveAsWindow.UIItemWindow11.UIHPListItem.UINameEdit;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow1.UISaveButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(33, 8));

            // Double-Click 'Favorites' -> 'Projects' tree item
            Mouse.DoubleClick(uIProjectsTreeItem, new Point(43, 18));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(59, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(30, 14));

            // Select '' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveCardParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(46, 14));
        }
        
        /// <summary>
        /// GTO
        /// </summary>
        public void GTO()
        {
            #region Variable Declarations
            WinButton uIGTOButton = this.UIHP97Window.UIGTOWindow.UIGTOButton;
            #endregion

            // Click 'GTO' button
            Mouse.Click(uIGTOButton, new Point(35, 12));
        }
        
        /// <summary>
        /// ManTraceNorm1Left
        /// </summary>
        public void ManTraceNorm1Left()
        {
            #region Variable Declarations
            WinButton uINORMButton = this.UIHP97Window.UIButtonWindow.UINORMButton;
            WinText uITRACEText = this.UIHP97Window.UITRACEWindow.UITRACEText;
            #endregion

            // Move 'NORM' button from (7, 4) to 'TRACE' label (29, 8)
            uITRACEText.EnsureClickable(new Point(29, 8));
            Mouse.StartDragging(uINORMButton, new Point(7, 4));
            Mouse.StopDragging(uITRACEText, new Point(29, 8));
        }
        
        /// <summary>
        /// GSB
        /// </summary>
        public void GSB()
        {
            #region Variable Declarations
            WinButton uIGSBButton = this.UIHP97Window.UIGSBWindow.UIGSBButton;
            #endregion

            // Click 'GSB' button
            Mouse.Click(uIGSBButton, new Point(33, 12));
        }
        
        /// <summary>
        /// ManTraceNorm1Right
        /// </summary>
        public void ManTraceNorm1Right()
        {
            #region Variable Declarations
            WinButton uINORMButton = this.UIHP97Window.UIButtonWindow.UINORMButton;
            WinText uINORMText = this.UIHP97Window.UINORMWindow.UINORMText;
            #endregion

            // Move 'NORM' button from (9, 2) to 'NORM' label (4, 4)
            uINORMText.EnsureClickable(new Point(4, 4));
            Mouse.StartDragging(uINORMButton, new Point(9, 2));
            Mouse.StopDragging(uINORMText, new Point(4, 4));
        }
        
        /// <summary>
        /// ZeroZeroZeroZero
        /// </summary>
        public void ZeroZeroZeroZero()
        {
            #region Variable Declarations
            WinButton uIItem0Button = this.UIHP97Window.UIItem0Window.UIItem0Button;
            #endregion

            // Double-Click '0' button
            Mouse.DoubleClick(uIItem0Button, new Point(92, 23));

            // Double-Click '0' button
            Mouse.DoubleClick(uIItem0Button, new Point(92, 23));
        }
        
        /// <summary>
        /// ZeroZeroZero
        /// </summary>
        public void ZeroZeroZero()
        {
            #region Variable Declarations
            WinButton uIItem0Button = this.UIHP97Window.UIItem0Window.UIItem0Button;
            #endregion

            // Double-Click '0' button
            Mouse.DoubleClick(uIItem0Button, new Point(99, 13));

            // Click '0' button
            Mouse.Click(uIItem0Button, new Point(99, 13));
        }
        
        /// <summary>
        /// FourFour
        /// </summary>
        public void FourFour()
        {
            #region Variable Declarations
            WinButton uIItem4Button = this.UIHP97Window.UIItem4Window.UIItem4Button;
            #endregion

            // Double-Click '4' button
            Mouse.DoubleClick(uIItem4Button, new Point(30, 23));
        }
        
        /// <summary>
        /// ThreeThreeThree
        /// </summary>
        public void ThreeThreeThree()
        {
            #region Variable Declarations
            WinButton uIItem3Button = this.UIHP97Window.UIItem3Window.UIItem3Button;
            #endregion

            // Double-Click '3' button
            Mouse.DoubleClick(uIItem3Button, new Point(39, 20));

            // Click '3' button
            Mouse.Click(uIItem3Button, new Point(39, 20));
        }
        
        /// <summary>
        /// AssertText - Use 'AssertTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertText()
        {
            #region Variable Declarations
            WinEdit uIAlphabeticTextBoxEdit = this.UIHP97Window.UIAlphabeticWindow.UIAlphabeticTextBoxEdit;
            #endregion

            // Verify that 'alphabeticTextBox' text box's property 'Text' equals ''
            Assert.AreEqual(this.AssertTextExpectedValues.UIAlphabeticTextBoxEditText, uIAlphabeticTextBoxEdit.Text);
        }
        
        /// <summary>
        /// ToPolar
        /// </summary>
        public void ToPolar()
        {
            #region Variable Declarations
            WinButton uIPButton = this.UIHP97Window.UIPWindow.UIPButton;
            #endregion

            // Click '→P' button
            Mouse.Click(uIPButton, new Point(17, 9));
        }
        
        /// <summary>
        /// ToRectangular
        /// </summary>
        public void ToRectangular()
        {
            #region Variable Declarations
            WinButton uIRButton = this.UIHP97Window.UIRWindow1.UIRButton;
            #endregion

            // Click '→R' button
            Mouse.Click(uIRButton, new Point(33, 11));
        }
        
        /// <summary>
        /// SubI
        /// </summary>
        public void SubI()
        {
            #region Variable Declarations
            WinButton uIIButton = this.UIHP97Window.UIIWindow1.UIIButton;
            #endregion

            // Click '(i)' button
            Mouse.Click(uIIButton, new Point(28, 8));
        }
        
        /// <summary>
        /// OpenStandardPacCard - Use 'OpenStandardPacCardParams' to pass parameters into this method.
        /// </summary>
        public void OpenStandardPacCard()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIHP97Window.UIMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIProjectsTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIProjectsTreeItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow3.UIMockingbirdListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow12.UIHPListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIOpenWindow.UIItemWindow21.UIPacsListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIOpenWindow.UIItemWindow3.UIStandardPacListItem.UINameEdit;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow11.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow2.UIFilenameEdit;
            #endregion

            // Click 'File' -> 'Open...' menu item
            Mouse.Click(uIOpenMenuItem, new Point(27, 7));

            // Double-Click 'Favorites' -> 'Projects' tree item
            Mouse.DoubleClick(uIProjectsTreeItem, new Point(40, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(24, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(29, 11));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(20, 16));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit3, new Point(18, 10));

            // Select '' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenStandardPacCardParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.OpenStandardPacCardParams.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual LaunchParams LaunchParams
        {
            get
            {
                if ((this.mLaunchParams == null))
                {
                    this.mLaunchParams = new LaunchParams();
                }
                return this.mLaunchParams;
            }
        }
        
        public virtual AssertNumericExpectedValues AssertNumericExpectedValues
        {
            get
            {
                if ((this.mAssertNumericExpectedValues == null))
                {
                    this.mAssertNumericExpectedValues = new AssertNumericExpectedValues();
                }
                return this.mAssertNumericExpectedValues;
            }
        }
        
        public virtual DParams DParams
        {
            get
            {
                if ((this.mDParams == null))
                {
                    this.mDParams = new DParams();
                }
                return this.mDParams;
            }
        }
        
        public virtual EditLabelsParams EditLabelsParams
        {
            get
            {
                if ((this.mEditLabelsParams == null))
                {
                    this.mEditLabelsParams = new EditLabelsParams();
                }
                return this.mEditLabelsParams;
            }
        }
        
        public virtual SaveCardParams SaveCardParams
        {
            get
            {
                if ((this.mSaveCardParams == null))
                {
                    this.mSaveCardParams = new SaveCardParams();
                }
                return this.mSaveCardParams;
            }
        }
        
        public virtual AssertTextExpectedValues AssertTextExpectedValues
        {
            get
            {
                if ((this.mAssertTextExpectedValues == null))
                {
                    this.mAssertTextExpectedValues = new AssertTextExpectedValues();
                }
                return this.mAssertTextExpectedValues;
            }
        }
        
        public virtual OpenStandardPacCardParams OpenStandardPacCardParams
        {
            get
            {
                if ((this.mOpenStandardPacCardParams == null))
                {
                    this.mOpenStandardPacCardParams = new OpenStandardPacCardParams();
                }
                return this.mOpenStandardPacCardParams;
            }
        }
        
        public UIHP97Window UIHP97Window
        {
            get
            {
                if ((this.mUIHP97Window == null))
                {
                    this.mUIHP97Window = new UIHP97Window();
                }
                return this.mUIHP97Window;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        #endregion
        
        #region Fields
        private LaunchParams mLaunchParams;
        
        private AssertNumericExpectedValues mAssertNumericExpectedValues;
        
        private DParams mDParams;
        
        private EditLabelsParams mEditLabelsParams;
        
        private SaveCardParams mSaveCardParams;
        
        private AssertTextExpectedValues mAssertTextExpectedValues;
        
        private OpenStandardPacCardParams mOpenStandardPacCardParams;
        
        private UIHP97Window mUIHP97Window;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Launch'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class LaunchParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'C:\Users\phl\Projects\Mockingbird\HP\HP97\bin\Debug\Mockingbird.HP.HP97.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\phl\\Projects\\Mockingbird\\HP\\HP97\\bin\\Debug\\Mockingbird.HP.HP97.exe";
        
        /// <summary>
        /// Launch 'C:\Users\phl\Projects\Mockingbird\HP\HP97\bin\Debug\Mockingbird.HP.HP97.exe'
        /// </summary>
        public string AlternateExePath = "C:\\Users\\phl\\Projects\\Mockingbird\\HP\\HP97\\bin\\Debug\\Mockingbird.HP.HP97.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNumeric'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertNumericExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'numericTextBox' text box's property 'Text' equals ''
        /// </summary>
        public string UINumericTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'D'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class DParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'd' in 'Unknown Name' list item
        /// </summary>
        public string UIItemListItem4SendKeys = "d";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditLabels'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class EditLabelsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Edit' -> 'Edit Labels' menu item
        /// </summary>
        public bool UIEditLabelsMenuItemChecked = true;
        
        /// <summary>
        /// Type 'SPHERE SURFACE AREA' in 'titleTextBox' text box
        /// </summary>
        public string UITitleTextBoxEditText = "SPHERE SURFACE AREA";
        
        /// <summary>
        /// Type '{Tab}' in 'titleTextBox' text box
        /// </summary>
        public string UITitleTextBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxfA' text box
        /// </summary>
        public string UITextBoxfAEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxfA' text box
        /// </summary>
        public string UITextBoxfAEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxfB' text box
        /// </summary>
        public string UITextBoxfBEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxfB' text box
        /// </summary>
        public string UITextBoxfBEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxfC' text box
        /// </summary>
        public string UITextBoxfCEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxfC' text box
        /// </summary>
        public string UITextBoxfCEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxfD' text box
        /// </summary>
        public string UITextBoxfDEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxfD' text box
        /// </summary>
        public string UITextBoxfDEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxfE' text box
        /// </summary>
        public string UITextBoxfEEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxfE' text box
        /// </summary>
        public string UITextBoxfEEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'd->A' in 'textBoxA' text box
        /// </summary>
        public string UITextBoxAEditText = "d->A";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxA' text box
        /// </summary>
        public string UITextBoxAEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxB' text box
        /// </summary>
        public string UITextBoxBEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxB' text box
        /// </summary>
        public string UITextBoxBEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxC' text box
        /// </summary>
        public string UITextBoxCEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxC' text box
        /// </summary>
        public string UITextBoxCEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxD' text box
        /// </summary>
        public string UITextBoxDEditText = "";
        
        /// <summary>
        /// Type '{Tab}' in 'textBoxD' text box
        /// </summary>
        public string UITextBoxDEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '' in 'textBoxE' text box
        /// </summary>
        public string UITextBoxEEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveCard'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveCardParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'aoe.hp96' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "aoe.hp96";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'alphabeticTextBox' text box's property 'Text' equals ''
        /// </summary>
        public string UIAlphabeticTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenStandardPacCard'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class OpenStandardPacCardParams
    {
        
        #region Fields
        /// <summary>
        /// Select '' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHP97Window : WinWindow
    {
        
        public UIHP97Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "HP-97";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public UIItem0Window UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        
        public UIItem2Window UIItem2Window
        {
            get
            {
                if ((this.mUIItem2Window == null))
                {
                    this.mUIItem2Window = new UIItem2Window(this);
                }
                return this.mUIItem2Window;
            }
        }
        
        public UIItem3Window UIItem3Window
        {
            get
            {
                if ((this.mUIItem3Window == null))
                {
                    this.mUIItem3Window = new UIItem3Window(this);
                }
                return this.mUIItem3Window;
            }
        }
        
        public UIItem4Window UIItem4Window
        {
            get
            {
                if ((this.mUIItem4Window == null))
                {
                    this.mUIItem4Window = new UIItem4Window(this);
                }
                return this.mUIItem4Window;
            }
        }
        
        public UIItem5Window UIItem5Window
        {
            get
            {
                if ((this.mUIItem5Window == null))
                {
                    this.mUIItem5Window = new UIItem5Window(this);
                }
                return this.mUIItem5Window;
            }
        }
        
        public UIItem6Window UIItem6Window
        {
            get
            {
                if ((this.mUIItem6Window == null))
                {
                    this.mUIItem6Window = new UIItem6Window(this);
                }
                return this.mUIItem6Window;
            }
        }
        
        public UIItem7Window UIItem7Window
        {
            get
            {
                if ((this.mUIItem7Window == null))
                {
                    this.mUIItem7Window = new UIItem7Window(this);
                }
                return this.mUIItem7Window;
            }
        }
        
        public UIItem8Window UIItem8Window
        {
            get
            {
                if ((this.mUIItem8Window == null))
                {
                    this.mUIItem8Window = new UIItem8Window(this);
                }
                return this.mUIItem8Window;
            }
        }
        
        public UIItem9Window UIItem9Window
        {
            get
            {
                if ((this.mUIItem9Window == null))
                {
                    this.mUIItem9Window = new UIItem9Window(this);
                }
                return this.mUIItem9Window;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIENTERWindow UIENTERWindow
        {
            get
            {
                if ((this.mUIENTERWindow == null))
                {
                    this.mUIENTERWindow = new UIENTERWindow(this);
                }
                return this.mUIENTERWindow;
            }
        }
        
        public UIButtonWindow UIButtonWindow
        {
            get
            {
                if ((this.mUIButtonWindow == null))
                {
                    this.mUIButtonWindow = new UIButtonWindow(this);
                }
                return this.mUIButtonWindow;
            }
        }
        
        public UIMANWindow UIMANWindow
        {
            get
            {
                if ((this.mUIMANWindow == null))
                {
                    this.mUIMANWindow = new UIMANWindow(this);
                }
                return this.mUIMANWindow;
            }
        }
        
        public UINORMWindow UINORMWindow
        {
            get
            {
                if ((this.mUINORMWindow == null))
                {
                    this.mUINORMWindow = new UINORMWindow(this);
                }
                return this.mUINORMWindow;
            }
        }
        
        public UIXWindow UIXWindow
        {
            get
            {
                if ((this.mUIXWindow == null))
                {
                    this.mUIXWindow = new UIXWindow(this);
                }
                return this.mUIXWindow;
            }
        }
        
        public UIHP97TitleBar UIHP97TitleBar
        {
            get
            {
                if ((this.mUIHP97TitleBar == null))
                {
                    this.mUIHP97TitleBar = new UIHP97TitleBar(this);
                }
                return this.mUIHP97TitleBar;
            }
        }
        
        public UIItem000Window UIItem000Window
        {
            get
            {
                if ((this.mUIItem000Window == null))
                {
                    this.mUIItem000Window = new UIItem000Window(this);
                }
                return this.mUIItem000Window;
            }
        }
        
        public UIFWindow UIFWindow
        {
            get
            {
                if ((this.mUIFWindow == null))
                {
                    this.mUIFWindow = new UIFWindow(this);
                }
                return this.mUIFWindow;
            }
        }
        
        public UISINWindow UISINWindow
        {
            get
            {
                if ((this.mUISINWindow == null))
                {
                    this.mUISINWindow = new UISINWindow(this);
                }
                return this.mUISINWindow;
            }
        }
        
        public UIItem1xWindow UIItem1xWindow
        {
            get
            {
                if ((this.mUIItem1xWindow == null))
                {
                    this.mUIItem1xWindow = new UIItem1xWindow(this);
                }
                return this.mUIItem1xWindow;
            }
        }
        
        public UIPRINTxWindow UIPRINTxWindow
        {
            get
            {
                if ((this.mUIPRINTxWindow == null))
                {
                    this.mUIPRINTxWindow = new UIPRINTxWindow(this);
                }
                return this.mUIPRINTxWindow;
            }
        }
        
        public UIListBoxWindow UIListBoxWindow
        {
            get
            {
                if ((this.mUIListBoxWindow == null))
                {
                    this.mUIListBoxWindow = new UIListBoxWindow(this);
                }
                return this.mUIListBoxWindow;
            }
        }
        
        public UICHSWindow UICHSWindow
        {
            get
            {
                if ((this.mUICHSWindow == null))
                {
                    this.mUICHSWindow = new UICHSWindow(this);
                }
                return this.mUICHSWindow;
            }
        }
        
        public UIHButtonWindow UIHButtonWindow
        {
            get
            {
                if ((this.mUIHButtonWindow == null))
                {
                    this.mUIHButtonWindow = new UIHButtonWindow(this);
                }
                return this.mUIHButtonWindow;
            }
        }
        
        public UIPanelMainWindow UIPanelMainWindow
        {
            get
            {
                if ((this.mUIPanelMainWindow == null))
                {
                    this.mUIPanelMainWindow = new UIPanelMainWindow(this);
                }
                return this.mUIPanelMainWindow;
            }
        }
        
        public UIAWindow UIAWindow
        {
            get
            {
                if ((this.mUIAWindow == null))
                {
                    this.mUIAWindow = new UIAWindow(this);
                }
                return this.mUIAWindow;
            }
        }
        
        public UIBWindow UIBWindow
        {
            get
            {
                if ((this.mUIBWindow == null))
                {
                    this.mUIBWindow = new UIBWindow(this);
                }
                return this.mUIBWindow;
            }
        }
        
        public UICWindow UICWindow
        {
            get
            {
                if ((this.mUICWindow == null))
                {
                    this.mUICWindow = new UICWindow(this);
                }
                return this.mUICWindow;
            }
        }
        
        public UICLxWindow UICLxWindow
        {
            get
            {
                if ((this.mUICLxWindow == null))
                {
                    this.mUICLxWindow = new UICLxWindow(this);
                }
                return this.mUICLxWindow;
            }
        }
        
        public UICOSWindow UICOSWindow
        {
            get
            {
                if ((this.mUICOSWindow == null))
                {
                    this.mUICOSWindow = new UICOSWindow(this);
                }
                return this.mUICOSWindow;
            }
        }
        
        public UIDSPWindow UIDSPWindow
        {
            get
            {
                if ((this.mUIDSPWindow == null))
                {
                    this.mUIDSPWindow = new UIDSPWindow(this);
                }
                return this.mUIDSPWindow;
            }
        }
        
        public UIEEXWindow UIEEXWindow
        {
            get
            {
                if ((this.mUIEEXWindow == null))
                {
                    this.mUIEEXWindow = new UIEEXWindow(this);
                }
                return this.mUIEEXWindow;
            }
        }
        
        public UIENGWindow UIENGWindow
        {
            get
            {
                if ((this.mUIENGWindow == null))
                {
                    this.mUIENGWindow = new UIENGWindow(this);
                }
                return this.mUIENGWindow;
            }
        }
        
        public UIE̽Window UIE̽Window
        {
            get
            {
                if ((this.mUIE̽Window == null))
                {
                    this.mUIE̽Window = new UIE̽Window(this);
                }
                return this.mUIE̽Window;
            }
        }
        
        public UIFIXWindow UIFIXWindow
        {
            get
            {
                if ((this.mUIFIXWindow == null))
                {
                    this.mUIFIXWindow = new UIFIXWindow(this);
                }
                return this.mUIFIXWindow;
            }
        }
        
        public UIIWindow UIIWindow
        {
            get
            {
                if ((this.mUIIWindow == null))
                {
                    this.mUIIWindow = new UIIWindow(this);
                }
                return this.mUIIWindow;
            }
        }
        
        public UILBLWindow UILBLWindow
        {
            get
            {
                if ((this.mUILBLWindow == null))
                {
                    this.mUILBLWindow = new UILBLWindow(this);
                }
                return this.mUILBLWindow;
            }
        }
        
        public UILNWindow UILNWindow
        {
            get
            {
                if ((this.mUILNWindow == null))
                {
                    this.mUILNWindow = new UILNWindow(this);
                }
                return this.mUILNWindow;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIPrinterFeedButtonWindow UIPrinterFeedButtonWindow
        {
            get
            {
                if ((this.mUIPrinterFeedButtonWindow == null))
                {
                    this.mUIPrinterFeedButtonWindow = new UIPrinterFeedButtonWindow(this);
                }
                return this.mUIPrinterFeedButtonWindow;
            }
        }
        
        public UIRCLWindow UIRCLWindow
        {
            get
            {
                if ((this.mUIRCLWindow == null))
                {
                    this.mUIRCLWindow = new UIRCLWindow(this);
                }
                return this.mUIRCLWindow;
            }
        }
        
        public UIRWindow UIRWindow
        {
            get
            {
                if ((this.mUIRWindow == null))
                {
                    this.mUIRWindow = new UIRWindow(this);
                }
                return this.mUIRWindow;
            }
        }
        
        public UIRTNWindow UIRTNWindow
        {
            get
            {
                if ((this.mUIRTNWindow == null))
                {
                    this.mUIRTNWindow = new UIRTNWindow(this);
                }
                return this.mUIRTNWindow;
            }
        }
        
        public UISCIWindow UISCIWindow
        {
            get
            {
                if ((this.mUISCIWindow == null))
                {
                    this.mUISCIWindow = new UISCIWindow(this);
                }
                return this.mUISCIWindow;
            }
        }
        
        public UIX̅Window UIX̅Window
        {
            get
            {
                if ((this.mUIX̅Window == null))
                {
                    this.mUIX̅Window = new UIX̅Window(this);
                }
                return this.mUIX̅Window;
            }
        }
        
        public UISTOWindow UISTOWindow
        {
            get
            {
                if ((this.mUISTOWindow == null))
                {
                    this.mUISTOWindow = new UISTOWindow(this);
                }
                return this.mUISTOWindow;
            }
        }
        
        public UITANWindow UITANWindow
        {
            get
            {
                if ((this.mUITANWindow == null))
                {
                    this.mUITANWindow = new UITANWindow(this);
                }
                return this.mUITANWindow;
            }
        }
        
        public UIButtonWindow1 UIButtonWindow1
        {
            get
            {
                if ((this.mUIButtonWindow1 == null))
                {
                    this.mUIButtonWindow1 = new UIButtonWindow1(this);
                }
                return this.mUIButtonWindow1;
            }
        }
        
        public UIButtonWindow2 UIButtonWindow2
        {
            get
            {
                if ((this.mUIButtonWindow2 == null))
                {
                    this.mUIButtonWindow2 = new UIButtonWindow2(this);
                }
                return this.mUIButtonWindow2;
            }
        }
        
        public UIXYWindow UIXYWindow
        {
            get
            {
                if ((this.mUIXYWindow == null))
                {
                    this.mUIXYWindow = new UIXYWindow(this);
                }
                return this.mUIXYWindow;
            }
        }
        
        public UIY̽Window UIY̽Window
        {
            get
            {
                if ((this.mUIY̽Window == null))
                {
                    this.mUIY̽Window = new UIY̽Window(this);
                }
                return this.mUIY̽Window;
            }
        }
        
        public UIMenuStripMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        
        public UIEWindow UIEWindow
        {
            get
            {
                if ((this.mUIEWindow == null))
                {
                    this.mUIEWindow = new UIEWindow(this);
                }
                return this.mUIEWindow;
            }
        }
        
        public UITITLEWindow UITITLEWindow
        {
            get
            {
                if ((this.mUITITLEWindow == null))
                {
                    this.mUITITLEWindow = new UITITLEWindow(this);
                }
                return this.mUITITLEWindow;
            }
        }
        
        public UIFAWindow UIFAWindow
        {
            get
            {
                if ((this.mUIFAWindow == null))
                {
                    this.mUIFAWindow = new UIFAWindow(this);
                }
                return this.mUIFAWindow;
            }
        }
        
        public UIFBWindow UIFBWindow
        {
            get
            {
                if ((this.mUIFBWindow == null))
                {
                    this.mUIFBWindow = new UIFBWindow(this);
                }
                return this.mUIFBWindow;
            }
        }
        
        public UIFCWindow UIFCWindow
        {
            get
            {
                if ((this.mUIFCWindow == null))
                {
                    this.mUIFCWindow = new UIFCWindow(this);
                }
                return this.mUIFCWindow;
            }
        }
        
        public UIFDWindow UIFDWindow
        {
            get
            {
                if ((this.mUIFDWindow == null))
                {
                    this.mUIFDWindow = new UIFDWindow(this);
                }
                return this.mUIFDWindow;
            }
        }
        
        public UIFEWindow UIFEWindow
        {
            get
            {
                if ((this.mUIFEWindow == null))
                {
                    this.mUIFEWindow = new UIFEWindow(this);
                }
                return this.mUIFEWindow;
            }
        }
        
        public UIAWindow1 UIAWindow1
        {
            get
            {
                if ((this.mUIAWindow1 == null))
                {
                    this.mUIAWindow1 = new UIAWindow1(this);
                }
                return this.mUIAWindow1;
            }
        }
        
        public UIAWindow2 UIAWindow2
        {
            get
            {
                if ((this.mUIAWindow2 == null))
                {
                    this.mUIAWindow2 = new UIAWindow2(this);
                }
                return this.mUIAWindow2;
            }
        }
        
        public UIBWindow1 UIBWindow1
        {
            get
            {
                if ((this.mUIBWindow1 == null))
                {
                    this.mUIBWindow1 = new UIBWindow1(this);
                }
                return this.mUIBWindow1;
            }
        }
        
        public UIBWindow2 UIBWindow2
        {
            get
            {
                if ((this.mUIBWindow2 == null))
                {
                    this.mUIBWindow2 = new UIBWindow2(this);
                }
                return this.mUIBWindow2;
            }
        }
        
        public UICWindow1 UICWindow1
        {
            get
            {
                if ((this.mUICWindow1 == null))
                {
                    this.mUICWindow1 = new UICWindow1(this);
                }
                return this.mUICWindow1;
            }
        }
        
        public UICWindow2 UICWindow2
        {
            get
            {
                if ((this.mUICWindow2 == null))
                {
                    this.mUICWindow2 = new UICWindow2(this);
                }
                return this.mUICWindow2;
            }
        }
        
        public UIDWindow UIDWindow
        {
            get
            {
                if ((this.mUIDWindow == null))
                {
                    this.mUIDWindow = new UIDWindow(this);
                }
                return this.mUIDWindow;
            }
        }
        
        public UIEWindow1 UIEWindow1
        {
            get
            {
                if ((this.mUIEWindow1 == null))
                {
                    this.mUIEWindow1 = new UIEWindow1(this);
                }
                return this.mUIEWindow1;
            }
        }
        
        public UIGroupBoxCardWindow UIGroupBoxCardWindow
        {
            get
            {
                if ((this.mUIGroupBoxCardWindow == null))
                {
                    this.mUIGroupBoxCardWindow = new UIGroupBoxCardWindow(this);
                }
                return this.mUIGroupBoxCardWindow;
            }
        }
        
        public UIHButtonWindow1 UIHButtonWindow1
        {
            get
            {
                if ((this.mUIHButtonWindow1 == null))
                {
                    this.mUIHButtonWindow1 = new UIHButtonWindow1(this);
                }
                return this.mUIHButtonWindow1;
            }
        }
        
        public UIGTOWindow UIGTOWindow
        {
            get
            {
                if ((this.mUIGTOWindow == null))
                {
                    this.mUIGTOWindow = new UIGTOWindow(this);
                }
                return this.mUIGTOWindow;
            }
        }
        
        public UITRACEWindow UITRACEWindow
        {
            get
            {
                if ((this.mUITRACEWindow == null))
                {
                    this.mUITRACEWindow = new UITRACEWindow(this);
                }
                return this.mUITRACEWindow;
            }
        }
        
        public UIGSBWindow UIGSBWindow
        {
            get
            {
                if ((this.mUIGSBWindow == null))
                {
                    this.mUIGSBWindow = new UIGSBWindow(this);
                }
                return this.mUIGSBWindow;
            }
        }
        
        public UIAlphabeticWindow UIAlphabeticWindow
        {
            get
            {
                if ((this.mUIAlphabeticWindow == null))
                {
                    this.mUIAlphabeticWindow = new UIAlphabeticWindow(this);
                }
                return this.mUIAlphabeticWindow;
            }
        }
        
        public UIPWindow UIPWindow
        {
            get
            {
                if ((this.mUIPWindow == null))
                {
                    this.mUIPWindow = new UIPWindow(this);
                }
                return this.mUIPWindow;
            }
        }
        
        public UIRWindow1 UIRWindow1
        {
            get
            {
                if ((this.mUIRWindow1 == null))
                {
                    this.mUIRWindow1 = new UIRWindow1(this);
                }
                return this.mUIRWindow1;
            }
        }
        
        public UIIWindow1 UIIWindow1
        {
            get
            {
                if ((this.mUIIWindow1 == null))
                {
                    this.mUIIWindow1 = new UIIWindow1(this);
                }
                return this.mUIIWindow1;
            }
        }
        
        public UIPanelWindow UIPanelWindow
        {
            get
            {
                if ((this.mUIPanelWindow == null))
                {
                    this.mUIPanelWindow = new UIPanelWindow(this);
                }
                return this.mUIPanelWindow;
            }
        }
        
        public UIPRGMWindow UIPRGMWindow
        {
            get
            {
                if ((this.mUIPRGMWindow == null))
                {
                    this.mUIPRGMWindow = new UIPRGMWindow(this);
                }
                return this.mUIPRGMWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItem0Window mUIItem0Window;
        
        private UIItem1Window mUIItem1Window;
        
        private UIItem2Window mUIItem2Window;
        
        private UIItem3Window mUIItem3Window;
        
        private UIItem4Window mUIItem4Window;
        
        private UIItem5Window mUIItem5Window;
        
        private UIItem6Window mUIItem6Window;
        
        private UIItem7Window mUIItem7Window;
        
        private UIItem8Window mUIItem8Window;
        
        private UIItem9Window mUIItem9Window;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIENTERWindow mUIENTERWindow;
        
        private UIButtonWindow mUIButtonWindow;
        
        private UIMANWindow mUIMANWindow;
        
        private UINORMWindow mUINORMWindow;
        
        private UIXWindow mUIXWindow;
        
        private UIHP97TitleBar mUIHP97TitleBar;
        
        private UIItem000Window mUIItem000Window;
        
        private UIFWindow mUIFWindow;
        
        private UISINWindow mUISINWindow;
        
        private UIItem1xWindow mUIItem1xWindow;
        
        private UIPRINTxWindow mUIPRINTxWindow;
        
        private UIListBoxWindow mUIListBoxWindow;
        
        private UICHSWindow mUICHSWindow;
        
        private UIHButtonWindow mUIHButtonWindow;
        
        private UIPanelMainWindow mUIPanelMainWindow;
        
        private UIAWindow mUIAWindow;
        
        private UIBWindow mUIBWindow;
        
        private UICWindow mUICWindow;
        
        private UICLxWindow mUICLxWindow;
        
        private UICOSWindow mUICOSWindow;
        
        private UIDSPWindow mUIDSPWindow;
        
        private UIEEXWindow mUIEEXWindow;
        
        private UIENGWindow mUIENGWindow;
        
        private UIE̽Window mUIE̽Window;
        
        private UIFIXWindow mUIFIXWindow;
        
        private UIIWindow mUIIWindow;
        
        private UILBLWindow mUILBLWindow;
        
        private UILNWindow mUILNWindow;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIPrinterFeedButtonWindow mUIPrinterFeedButtonWindow;
        
        private UIRCLWindow mUIRCLWindow;
        
        private UIRWindow mUIRWindow;
        
        private UIRTNWindow mUIRTNWindow;
        
        private UISCIWindow mUISCIWindow;
        
        private UIX̅Window mUIX̅Window;
        
        private UISTOWindow mUISTOWindow;
        
        private UITANWindow mUITANWindow;
        
        private UIButtonWindow1 mUIButtonWindow1;
        
        private UIButtonWindow2 mUIButtonWindow2;
        
        private UIXYWindow mUIXYWindow;
        
        private UIY̽Window mUIY̽Window;
        
        private UIMenuStripMenuBar mUIMenuStripMenuBar;
        
        private UIEWindow mUIEWindow;
        
        private UITITLEWindow mUITITLEWindow;
        
        private UIFAWindow mUIFAWindow;
        
        private UIFBWindow mUIFBWindow;
        
        private UIFCWindow mUIFCWindow;
        
        private UIFDWindow mUIFDWindow;
        
        private UIFEWindow mUIFEWindow;
        
        private UIAWindow1 mUIAWindow1;
        
        private UIAWindow2 mUIAWindow2;
        
        private UIBWindow1 mUIBWindow1;
        
        private UIBWindow2 mUIBWindow2;
        
        private UICWindow1 mUICWindow1;
        
        private UICWindow2 mUICWindow2;
        
        private UIDWindow mUIDWindow;
        
        private UIEWindow1 mUIEWindow1;
        
        private UIGroupBoxCardWindow mUIGroupBoxCardWindow;
        
        private UIHButtonWindow1 mUIHButtonWindow1;
        
        private UIGTOWindow mUIGTOWindow;
        
        private UITRACEWindow mUITRACEWindow;
        
        private UIGSBWindow mUIGSBWindow;
        
        private UIAlphabeticWindow mUIAlphabeticWindow;
        
        private UIPWindow mUIPWindow;
        
        private UIRWindow1 mUIRWindow1;
        
        private UIIWindow1 mUIIWindow1;
        
        private UIPanelWindow mUIPanelWindow;
        
        private UIPRGMWindow mUIPRGMWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem0Window : WinWindow
    {
        
        public UIItem0Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "26";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem0Button
        {
            get
            {
                if ((this.mUIItem0Button == null))
                {
                    this.mUIItem0Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem0Button.SearchProperties[WinButton.PropertyNames.Name] = "0";
                    this.mUIItem0Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem0Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem0Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "21";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem1Button
        {
            get
            {
                if ((this.mUIItem1Button == null))
                {
                    this.mUIItem1Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem1Button.SearchProperties[WinButton.PropertyNames.Name] = "1";
                    this.mUIItem1Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem1Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem2Window : WinWindow
    {
        
        public UIItem2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "18";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem2Button
        {
            get
            {
                if ((this.mUIItem2Button == null))
                {
                    this.mUIItem2Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem2Button.SearchProperties[WinButton.PropertyNames.Name] = "2";
                    this.mUIItem2Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem2Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem2Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem3Window : WinWindow
    {
        
        public UIItem3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "15";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem3Button
        {
            get
            {
                if ((this.mUIItem3Button == null))
                {
                    this.mUIItem3Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem3Button.SearchProperties[WinButton.PropertyNames.Name] = "3";
                    this.mUIItem3Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem3Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem3Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem4Window : WinWindow
    {
        
        public UIItem4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "20";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem4Button
        {
            get
            {
                if ((this.mUIItem4Button == null))
                {
                    this.mUIItem4Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem4Button.SearchProperties[WinButton.PropertyNames.Name] = "4";
                    this.mUIItem4Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem4Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem4Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem5Window : WinWindow
    {
        
        public UIItem5Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "17";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem5Button
        {
            get
            {
                if ((this.mUIItem5Button == null))
                {
                    this.mUIItem5Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem5Button.SearchProperties[WinButton.PropertyNames.Name] = "5";
                    this.mUIItem5Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem5Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem5Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem6Window : WinWindow
    {
        
        public UIItem6Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "14";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem6Button.SearchProperties[WinButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem6Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem7Window : WinWindow
    {
        
        public UIItem7Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "22";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem7Button
        {
            get
            {
                if ((this.mUIItem7Button == null))
                {
                    this.mUIItem7Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem7Button.SearchProperties[WinButton.PropertyNames.Name] = "7";
                    this.mUIItem7Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem7Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem8Window : WinWindow
    {
        
        public UIItem8Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "19";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem8Button
        {
            get
            {
                if ((this.mUIItem8Button == null))
                {
                    this.mUIItem8Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem8Button.SearchProperties[WinButton.PropertyNames.Name] = "8";
                    this.mUIItem8Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem8Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem8Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem9Window : WinWindow
    {
        
        public UIItem9Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "16";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem9Button
        {
            get
            {
                if ((this.mUIItem9Button == null))
                {
                    this.mUIItem9Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem9Button.SearchProperties[WinButton.PropertyNames.Name] = "9";
                    this.mUIItem9Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem9Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem9Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = " ・";
                    this.mUIItemButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "13";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "÷";
                    this.mUIItemButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "11";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "×";
                    this.mUIItemButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "12";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "-";
                    this.mUIItemButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "+";
                    this.mUIItemButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIENTERWindow : WinWindow
    {
        
        public UIENTERWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIENTERButton
        {
            get
            {
                if ((this.mUIENTERButton == null))
                {
                    this.mUIENTERButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIENTERButton.SearchProperties[WinButton.PropertyNames.Name] = "ENTER ↑";
                    this.mUIENTERButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIENTERButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIENTERButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIButtonWindow : WinWindow
    {
        
        public UIButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "45";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UINORMButton
        {
            get
            {
                if ((this.mUINORMButton == null))
                {
                    this.mUINORMButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINORMButton.SearchProperties[WinButton.PropertyNames.Name] = "NORM";
                    this.mUINORMButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUINORMButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINORMButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMANWindow : WinWindow
    {
        
        public UIMANWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftLabel";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinText UIMANText
        {
            get
            {
                if ((this.mUIMANText == null))
                {
                    this.mUIMANText = new WinText(this);
                    #region Search Criteria
                    this.mUIMANText.SearchProperties[WinText.PropertyNames.Name] = "MAN";
                    this.mUIMANText.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIMANText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIMANText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINORMWindow : WinWindow
    {
        
        public UINORMWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rightLabel";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinText UINORMText
        {
            get
            {
                if ((this.mUINORMText == null))
                {
                    this.mUINORMText = new WinText(this);
                    #region Search Criteria
                    this.mUINORMText.SearchProperties[WinText.PropertyNames.Name] = "NORM";
                    this.mUINORMText.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUINORMText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINORMText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIXWindow : WinWindow
    {
        
        public UIXWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "30";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIXButton
        {
            get
            {
                if ((this.mUIXButton == null))
                {
                    this.mUIXButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIXButton.SearchProperties[WinButton.PropertyNames.Name] = "x²";
                    this.mUIXButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIXButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIXButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHP97TitleBar : WinTitleBar
    {
        
        public UIHP97TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem000Window : WinWindow
    {
        
        public UIItem000Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "numericTextBox";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UINumericTextBoxEdit
        {
            get
            {
                if ((this.mUINumericTextBoxEdit == null))
                {
                    this.mUINumericTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINumericTextBoxEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUINumericTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINumericTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFWindow : WinWindow
    {
        
        public UIFWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "53";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIFButton
        {
            get
            {
                if ((this.mUIFButton == null))
                {
                    this.mUIFButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFButton.SearchProperties[WinButton.PropertyNames.Name] = "f";
                    this.mUIFButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIFButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISINWindow : WinWindow
    {
        
        public UISINWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "38";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UISINButton
        {
            get
            {
                if ((this.mUISINButton == null))
                {
                    this.mUISINButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISINButton.SearchProperties[WinButton.PropertyNames.Name] = "SIN";
                    this.mUISINButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUISINButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISINButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem1xWindow : WinWindow
    {
        
        public UIItem1xWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "28";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem1xButton
        {
            get
            {
                if ((this.mUIItem1xButton == null))
                {
                    this.mUIItem1xButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem1xButton.SearchProperties[WinButton.PropertyNames.Name] = "1/x";
                    this.mUIItem1xButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItem1xButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem1xButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPRINTxWindow : WinWindow
    {
        
        public UIPRINTxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIPRINTxButton
        {
            get
            {
                if ((this.mUIPRINTxButton == null))
                {
                    this.mUIPRINTxButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPRINTxButton.SearchProperties[WinButton.PropertyNames.Name] = "PRINT x";
                    this.mUIPRINTxButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIPRINTxButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPRINTxButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIListBoxWindow : WinWindow
    {
        
        public UIListBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listBox";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinListItem UIItemListItem
        {
            get
            {
                if ((this.mUIItemListItem == null))
                {
                    this.mUIItemListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem.SearchProperties[WinListItem.PropertyNames.Instance] = "7";
                    this.mUIItemListItem.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemListItem;
            }
        }
        
        public WinListItem UIItemListItem1
        {
            get
            {
                if ((this.mUIItemListItem1 == null))
                {
                    this.mUIItemListItem1 = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem1.SearchProperties[WinListItem.PropertyNames.Instance] = "6";
                    this.mUIItemListItem1.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemListItem1;
            }
        }
        
        public WinListItem UIItemListItem2
        {
            get
            {
                if ((this.mUIItemListItem2 == null))
                {
                    this.mUIItemListItem2 = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem2.SearchProperties[WinListItem.PropertyNames.Instance] = "5";
                    this.mUIItemListItem2.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemListItem2;
            }
        }
        
        public WinListItem UIItemListItem3
        {
            get
            {
                if ((this.mUIItemListItem3 == null))
                {
                    this.mUIItemListItem3 = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem3.SearchProperties[WinListItem.PropertyNames.Instance] = "4";
                    this.mUIItemListItem3.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemListItem3;
            }
        }
        
        public WinListItem UIItemListItem4
        {
            get
            {
                if ((this.mUIItemListItem4 == null))
                {
                    this.mUIItemListItem4 = new WinListItem(this);
                    #region Search Criteria
                    this.mUIItemListItem4.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemListItem4;
            }
        }
        
        public WinList UIListBoxList
        {
            get
            {
                if ((this.mUIListBoxList == null))
                {
                    this.mUIListBoxList = new WinList(this);
                    #region Search Criteria
                    this.mUIListBoxList.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIItemListItem;
        
        private WinListItem mUIItemListItem1;
        
        private WinListItem mUIItemListItem2;
        
        private WinListItem mUIItemListItem3;
        
        private WinListItem mUIItemListItem4;
        
        private WinList mUIListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICHSWindow : WinWindow
    {
        
        public UICHSWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UICHSButton
        {
            get
            {
                if ((this.mUICHSButton == null))
                {
                    this.mUICHSButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICHSButton.SearchProperties[WinButton.PropertyNames.Name] = "CHS";
                    this.mUICHSButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUICHSButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICHSButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHButtonWindow : WinWindow
    {
        
        public UIHButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "hButton";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "21";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIHButtonButton
        {
            get
            {
                if ((this.mUIHButtonButton == null))
                {
                    this.mUIHButtonButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIHButtonButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIHButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIHButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelMainWindow : WinWindow
    {
        
        public UIPanelMainWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panelMain";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinClient UIPanelMainClient
        {
            get
            {
                if ((this.mUIPanelMainClient == null))
                {
                    this.mUIPanelMainClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanelMainClient.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIPanelMainClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanelMainClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAWindow : WinWindow
    {
        
        public UIAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "50";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIAButton
        {
            get
            {
                if ((this.mUIAButton == null))
                {
                    this.mUIAButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAButton.SearchProperties[WinButton.PropertyNames.Name] = "A";
                    this.mUIAButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBWindow : WinWindow
    {
        
        public UIBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "49";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIBButton
        {
            get
            {
                if ((this.mUIBButton == null))
                {
                    this.mUIBButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBButton.SearchProperties[WinButton.PropertyNames.Name] = "B";
                    this.mUIBButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIBButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICWindow : WinWindow
    {
        
        public UICWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "52";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UICButton
        {
            get
            {
                if ((this.mUICButton == null))
                {
                    this.mUICButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICButton.SearchProperties[WinButton.PropertyNames.Name] = "C";
                    this.mUICButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUICButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICLxWindow : WinWindow
    {
        
        public UICLxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "24";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UICLxButton
        {
            get
            {
                if ((this.mUICLxButton == null))
                {
                    this.mUICLxButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICLxButton.SearchProperties[WinButton.PropertyNames.Name] = "CL x";
                    this.mUICLxButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUICLxButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICLxButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICOSWindow : WinWindow
    {
        
        public UICOSWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "34";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UICOSButton
        {
            get
            {
                if ((this.mUICOSButton == null))
                {
                    this.mUICOSButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICOSButton.SearchProperties[WinButton.PropertyNames.Name] = "COS";
                    this.mUICOSButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUICOSButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICOSButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDSPWindow : WinWindow
    {
        
        public UIDSPWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "9";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIDSPButton
        {
            get
            {
                if ((this.mUIDSPButton == null))
                {
                    this.mUIDSPButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDSPButton.SearchProperties[WinButton.PropertyNames.Name] = "DSP";
                    this.mUIDSPButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIDSPButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDSPButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEEXWindow : WinWindow
    {
        
        public UIEEXWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "7";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIEEXButton
        {
            get
            {
                if ((this.mUIEEXButton == null))
                {
                    this.mUIEEXButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEEXButton.SearchProperties[WinButton.PropertyNames.Name] = "EEX";
                    this.mUIEEXButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIEEXButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEEXButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIENGWindow : WinWindow
    {
        
        public UIENGWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIENGButton
        {
            get
            {
                if ((this.mUIENGButton == null))
                {
                    this.mUIENGButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIENGButton.SearchProperties[WinButton.PropertyNames.Name] = "ENG";
                    this.mUIENGButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIENGButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIENGButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIE̽Window : WinWindow
    {
        
        public UIE̽Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "42";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIE̽Button
        {
            get
            {
                if ((this.mUIE̽Button == null))
                {
                    this.mUIE̽Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIE̽Button.SearchProperties[WinButton.PropertyNames.Name] = "e ̽";
                    this.mUIE̽Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIE̽Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIE̽Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFIXWindow : WinWindow
    {
        
        public UIFIXWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIFIXButton
        {
            get
            {
                if ((this.mUIFIXButton == null))
                {
                    this.mUIFIXButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFIXButton.SearchProperties[WinButton.PropertyNames.Name] = "FIX";
                    this.mUIFIXButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIFIXButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFIXButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIIWindow : WinWindow
    {
        
        public UIIWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "35";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIIButton
        {
            get
            {
                if ((this.mUIIButton == null))
                {
                    this.mUIIButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIButton.SearchProperties[WinButton.PropertyNames.Name] = "I";
                    this.mUIIButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIIButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILBLWindow : WinWindow
    {
        
        public UILBLWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "59";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UILBLButton
        {
            get
            {
                if ((this.mUILBLButton == null))
                {
                    this.mUILBLButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILBLButton.SearchProperties[WinButton.PropertyNames.Name] = "LBL";
                    this.mUILBLButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUILBLButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILBLButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILNWindow : WinWindow
    {
        
        public UILNWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "40";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UILNButton
        {
            get
            {
                if ((this.mUILNButton == null))
                {
                    this.mUILNButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILNButton.SearchProperties[WinButton.PropertyNames.Name] = "LN";
                    this.mUILNButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUILNButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILNButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "31";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "%";
                    this.mUIItemButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPrinterFeedButtonWindow : WinWindow
    {
        
        public UIPrinterFeedButtonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "printerFeedButton";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrinterFeedButtonButton
        {
            get
            {
                if ((this.mUIPrinterFeedButtonButton == null))
                {
                    this.mUIPrinterFeedButtonButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrinterFeedButtonButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIPrinterFeedButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrinterFeedButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRCLWindow : WinWindow
    {
        
        public UIRCLWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "41";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIRCLButton
        {
            get
            {
                if ((this.mUIRCLButton == null))
                {
                    this.mUIRCLButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRCLButton.SearchProperties[WinButton.PropertyNames.Name] = "RCL";
                    this.mUIRCLButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIRCLButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRCLButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRWindow : WinWindow
    {
        
        public UIRWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "25";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIRButton
        {
            get
            {
                if ((this.mUIRButton == null))
                {
                    this.mUIRButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRButton.SearchProperties[WinButton.PropertyNames.Name] = "R↓";
                    this.mUIRButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIRButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRTNWindow : WinWindow
    {
        
        public UIRTNWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "54";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIRTNButton
        {
            get
            {
                if ((this.mUIRTNButton == null))
                {
                    this.mUIRTNButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRTNButton.SearchProperties[WinButton.PropertyNames.Name] = "RTN";
                    this.mUIRTNButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIRTNButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRTNButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISCIWindow : WinWindow
    {
        
        public UISCIWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UISCIButton
        {
            get
            {
                if ((this.mUISCIButton == null))
                {
                    this.mUISCIButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISCIButton.SearchProperties[WinButton.PropertyNames.Name] = "SCI";
                    this.mUISCIButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUISCIButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISCIButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIX̅Window : WinWindow
    {
        
        public UIX̅Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "27";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIX̅Button
        {
            get
            {
                if ((this.mUIX̅Button == null))
                {
                    this.mUIX̅Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIX̅Button.SearchProperties[WinButton.PropertyNames.Name] = "√x̅";
                    this.mUIX̅Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIX̅Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIX̅Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISTOWindow : WinWindow
    {
        
        public UISTOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "43";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UISTOButton
        {
            get
            {
                if ((this.mUISTOButton == null))
                {
                    this.mUISTOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISTOButton.SearchProperties[WinButton.PropertyNames.Name] = "STO";
                    this.mUISTOButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUISTOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISTOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITANWindow : WinWindow
    {
        
        public UITANWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "36";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UITANButton
        {
            get
            {
                if ((this.mUITANButton == null))
                {
                    this.mUITANButton = new WinButton(this);
                    #region Search Criteria
                    this.mUITANButton.SearchProperties[WinButton.PropertyNames.Name] = "TAN";
                    this.mUITANButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITANButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUITANButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIButtonWindow1 : WinWindow
    {
        
        public UIButtonWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "47";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIONButton
        {
            get
            {
                if ((this.mUIONButton == null))
                {
                    this.mUIONButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIONButton.SearchProperties[WinButton.PropertyNames.Name] = "ON";
                    this.mUIONButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIONButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIONButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIButtonWindow2 : WinWindow
    {
        
        public UIButtonWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "48";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIRUNButton
        {
            get
            {
                if ((this.mUIRUNButton == null))
                {
                    this.mUIRUNButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRUNButton.SearchProperties[WinButton.PropertyNames.Name] = "RUN";
                    this.mUIRUNButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIRUNButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRUNButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIXYWindow : WinWindow
    {
        
        public UIXYWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "23";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIXYButton
        {
            get
            {
                if ((this.mUIXYButton == null))
                {
                    this.mUIXYButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIXYButton.SearchProperties[WinButton.PropertyNames.Name] = "x⇄y";
                    this.mUIXYButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIXYButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIXYButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIY̽Window : WinWindow
    {
        
        public UIY̽Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "44";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIY̽Button
        {
            get
            {
                if ((this.mUIY̽Button == null))
                {
                    this.mUIY̽Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIY̽Button.SearchProperties[WinButton.PropertyNames.Name] = "y ̽";
                    this.mUIY̽Button.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIY̽Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIY̽Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStripMenuBar : WinMenuBar
    {
        
        public UIMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIEditMenuItem mUIEditMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open...";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIEditLabelsMenuItem
        {
            get
            {
                if ((this.mUIEditLabelsMenuItem == null))
                {
                    this.mUIEditLabelsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEditLabelsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit Labels";
                    this.mUIEditLabelsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIEditLabelsMenuItem.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIEditLabelsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIEditLabelsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEWindow : WinWindow
    {
        
        public UIEWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "46";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIEButton
        {
            get
            {
                if ((this.mUIEButton == null))
                {
                    this.mUIEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEButton.SearchProperties[WinButton.PropertyNames.Name] = "E";
                    this.mUIEButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIEButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITITLEWindow : WinWindow
    {
        
        public UITITLEWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "titleTextBox";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITitleTextBoxEdit
        {
            get
            {
                if ((this.mUITitleTextBoxEdit == null))
                {
                    this.mUITitleTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITitleTextBoxEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITitleTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITitleTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFAWindow : WinWindow
    {
        
        public UIFAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxfA";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxfAEdit
        {
            get
            {
                if ((this.mUITextBoxfAEdit == null))
                {
                    this.mUITextBoxfAEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxfAEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxfAEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxfAEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFBWindow : WinWindow
    {
        
        public UIFBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxfB";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxfBEdit
        {
            get
            {
                if ((this.mUITextBoxfBEdit == null))
                {
                    this.mUITextBoxfBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxfBEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxfBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxfBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFCWindow : WinWindow
    {
        
        public UIFCWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxfC";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxfCEdit
        {
            get
            {
                if ((this.mUITextBoxfCEdit == null))
                {
                    this.mUITextBoxfCEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxfCEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxfCEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxfCEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFDWindow : WinWindow
    {
        
        public UIFDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxfD";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxfDEdit
        {
            get
            {
                if ((this.mUITextBoxfDEdit == null))
                {
                    this.mUITextBoxfDEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxfDEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxfDEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxfDEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFEWindow : WinWindow
    {
        
        public UIFEWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxfE";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxfEEdit
        {
            get
            {
                if ((this.mUITextBoxfEEdit == null))
                {
                    this.mUITextBoxfEEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxfEEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxfEEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxfEEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAWindow1 : WinWindow
    {
        
        public UIAWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxA";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxAEdit
        {
            get
            {
                if ((this.mUITextBoxAEdit == null))
                {
                    this.mUITextBoxAEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxAEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxAEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxAEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAWindow2 : WinWindow
    {
        
        public UIAWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxA";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxAEdit
        {
            get
            {
                if ((this.mUITextBoxAEdit == null))
                {
                    this.mUITextBoxAEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxAEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxAEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxAEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBWindow1 : WinWindow
    {
        
        public UIBWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxB";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxBEdit
        {
            get
            {
                if ((this.mUITextBoxBEdit == null))
                {
                    this.mUITextBoxBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxBEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBWindow2 : WinWindow
    {
        
        public UIBWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxB";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxBEdit
        {
            get
            {
                if ((this.mUITextBoxBEdit == null))
                {
                    this.mUITextBoxBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxBEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICWindow1 : WinWindow
    {
        
        public UICWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxC";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCEdit
        {
            get
            {
                if ((this.mUITextBoxCEdit == null))
                {
                    this.mUITextBoxCEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxCEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICWindow2 : WinWindow
    {
        
        public UICWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxC";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCEdit
        {
            get
            {
                if ((this.mUITextBoxCEdit == null))
                {
                    this.mUITextBoxCEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxCEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDWindow : WinWindow
    {
        
        public UIDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxD";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxDEdit
        {
            get
            {
                if ((this.mUITextBoxDEdit == null))
                {
                    this.mUITextBoxDEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxDEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxDEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxDEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEWindow1 : WinWindow
    {
        
        public UIEWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxE";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxEEdit
        {
            get
            {
                if ((this.mUITextBoxEEdit == null))
                {
                    this.mUITextBoxEEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxEEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITextBoxEEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxEEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGroupBoxCardWindow : WinWindow
    {
        
        public UIGroupBoxCardWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "groupBoxCard";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinGroup UIGroupBoxCardGroup
        {
            get
            {
                if ((this.mUIGroupBoxCardGroup == null))
                {
                    this.mUIGroupBoxCardGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIGroupBoxCardGroup.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIGroupBoxCardGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinGroup mUIGroupBoxCardGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHButtonWindow1 : WinWindow
    {
        
        public UIHButtonWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "hButton";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "47";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIHButtonButton
        {
            get
            {
                if ((this.mUIHButtonButton == null))
                {
                    this.mUIHButtonButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIHButtonButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIHButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIHButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGTOWindow : WinWindow
    {
        
        public UIGTOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "55";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIGTOButton
        {
            get
            {
                if ((this.mUIGTOButton == null))
                {
                    this.mUIGTOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGTOButton.SearchProperties[WinButton.PropertyNames.Name] = "GTO";
                    this.mUIGTOButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIGTOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGTOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITRACEWindow : WinWindow
    {
        
        public UITRACEWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "centerLabel";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinText UITRACEText
        {
            get
            {
                if ((this.mUITRACEText == null))
                {
                    this.mUITRACEText = new WinText(this);
                    #region Search Criteria
                    this.mUITRACEText.SearchProperties[WinText.PropertyNames.Name] = "TRACE";
                    this.mUITRACEText.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUITRACEText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITRACEText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGSBWindow : WinWindow
    {
        
        public UIGSBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "57";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIGSBButton
        {
            get
            {
                if ((this.mUIGSBButton == null))
                {
                    this.mUIGSBButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGSBButton.SearchProperties[WinButton.PropertyNames.Name] = "GSB";
                    this.mUIGSBButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIGSBButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGSBButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAlphabeticWindow : WinWindow
    {
        
        public UIAlphabeticWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "alphabeticTextBox";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAlphabeticTextBoxEdit
        {
            get
            {
                if ((this.mUIAlphabeticTextBoxEdit == null))
                {
                    this.mUIAlphabeticTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAlphabeticTextBoxEdit.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIAlphabeticTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAlphabeticTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPWindow : WinWindow
    {
        
        public UIPWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "39";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIPButton
        {
            get
            {
                if ((this.mUIPButton == null))
                {
                    this.mUIPButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPButton.SearchProperties[WinButton.PropertyNames.Name] = "→P";
                    this.mUIPButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIPButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRWindow1 : WinWindow
    {
        
        public UIRWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "33";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIRButton
        {
            get
            {
                if ((this.mUIRButton == null))
                {
                    this.mUIRButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRButton.SearchProperties[WinButton.PropertyNames.Name] = "→R";
                    this.mUIRButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIRButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIIWindow1 : WinWindow
    {
        
        public UIIWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "37";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinButton UIIButton
        {
            get
            {
                if ((this.mUIIButton == null))
                {
                    this.mUIIButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIIButton.SearchProperties[WinButton.PropertyNames.Name] = "(i)";
                    this.mUIIButton.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIIButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIIButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanelWindow : WinWindow
    {
        
        public UIPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinClient UIPanelClient
        {
            get
            {
                if ((this.mUIPanelClient == null))
                {
                    this.mUIPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanelClient.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPRGMWindow : WinWindow
    {
        
        public UIPRGMWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "leftLabel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("HP-97");
            #endregion
        }
        
        #region Properties
        public WinText UIPRGMText
        {
            get
            {
                if ((this.mUIPRGMText == null))
                {
                    this.mUIPRGMText = new WinText(this);
                    #region Search Criteria
                    this.mUIPRGMText.SearchProperties[WinText.PropertyNames.Name] = "PRGM";
                    this.mUIPRGMText.WindowTitles.Add("HP-97");
                    #endregion
                }
                return this.mUIPRGMText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIPRGMText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        
        public UIFolderViewWindow1 UIFolderViewWindow1
        {
            get
            {
                if ((this.mUIFolderViewWindow1 == null))
                {
                    this.mUIFolderViewWindow1 = new UIFolderViewWindow1(this);
                }
                return this.mUIFolderViewWindow1;
            }
        }
        
        public UIFolderViewWindow2 UIFolderViewWindow2
        {
            get
            {
                if ((this.mUIFolderViewWindow2 == null))
                {
                    this.mUIFolderViewWindow2 = new UIFolderViewWindow2(this);
                }
                return this.mUIFolderViewWindow2;
            }
        }
        
        public UIFolderViewWindow3 UIFolderViewWindow3
        {
            get
            {
                if ((this.mUIFolderViewWindow3 == null))
                {
                    this.mUIFolderViewWindow3 = new UIFolderViewWindow3(this);
                }
                return this.mUIFolderViewWindow3;
            }
        }
        
        public UIFolderViewWindow4 UIFolderViewWindow4
        {
            get
            {
                if ((this.mUIFolderViewWindow4 == null))
                {
                    this.mUIFolderViewWindow4 = new UIFolderViewWindow4(this);
                }
                return this.mUIFolderViewWindow4;
            }
        }
        
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIFolderViewWindow5 UIFolderViewWindow5
        {
            get
            {
                if ((this.mUIFolderViewWindow5 == null))
                {
                    this.mUIFolderViewWindow5 = new UIFolderViewWindow5(this);
                }
                return this.mUIFolderViewWindow5;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow31 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow31(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIItemWindow211 UIItemWindow21
        {
            get
            {
                if ((this.mUIItemWindow21 == null))
                {
                    this.mUIItemWindow21 = new UIItemWindow211(this);
                }
                return this.mUIItemWindow21;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        
        private UIFolderViewWindow1 mUIFolderViewWindow1;
        
        private UIFolderViewWindow2 mUIFolderViewWindow2;
        
        private UIFolderViewWindow3 mUIFolderViewWindow3;
        
        private UIFolderViewWindow4 mUIFolderViewWindow4;
        
        private UIItemWindow6 mUIItemWindow;
        
        private UIFolderViewWindow5 mUIFolderViewWindow5;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow31 mUIItemWindow3;
        
        private UIItemWindow12 mUIItemWindow12;
        
        private UIItemWindow211 mUIItemWindow21;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UIMyProjectsListItem
        {
            get
            {
                if ((this.mUIMyProjectsListItem == null))
                {
                    this.mUIMyProjectsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIMyProjectsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "My Projects";
                    this.mUIMyProjectsListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIMyProjectsListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIMyProjectsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewWindow1 : WinWindow
    {
        
        public UIFolderViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UIMockingbirdListItem
        {
            get
            {
                if ((this.mUIMockingbirdListItem == null))
                {
                    this.mUIMockingbirdListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIMockingbirdListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Mockingbird";
                    this.mUIMockingbirdListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIMockingbirdListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIMockingbirdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewWindow2 : WinWindow
    {
        
        public UIFolderViewWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UIHPListItem
        {
            get
            {
                if ((this.mUIHPListItem == null))
                {
                    this.mUIHPListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIHPListItem.SearchProperties[WinListItem.PropertyNames.Name] = "HP";
                    this.mUIHPListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIHPListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIHPListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewWindow3 : WinWindow
    {
        
        public UIFolderViewWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UIPacsListItem
        {
            get
            {
                if ((this.mUIPacsListItem == null))
                {
                    this.mUIPacsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIPacsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Pacs";
                    this.mUIPacsListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIPacsListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIPacsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewWindow4 : WinWindow
    {
        
        public UIFolderViewWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UIStandardPacListItem
        {
            get
            {
                if ((this.mUIStandardPacListItem == null))
                {
                    this.mUIStandardPacListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIStandardPacListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Standard Pac";
                    this.mUIStandardPacListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIStandardPacListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIStandardPacListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1136";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilesoftypeComboBox
        {
            get
            {
                if ((this.mUIFilesoftypeComboBox == null))
                {
                    this.mUIFilesoftypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilesoftypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Files of type:";
                    this.mUIFilesoftypeComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilesoftypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilesoftypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewWindow5 : WinWindow
    {
        
        public UIFolderViewWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UICalendarFunctionshp6ListItem
        {
            get
            {
                if ((this.mUICalendarFunctionshp6ListItem == null))
                {
                    this.mUICalendarFunctionshp6ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUICalendarFunctionshp6ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Calendar Functions.hp67";
                    this.mUICalendarFunctionshp6ListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICalendarFunctionshp6ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUICalendarFunctionshp6ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1184";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIMyDocumentsButton
        {
            get
            {
                if ((this.mUIMyDocumentsButton == null))
                {
                    this.mUIMyDocumentsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMyDocumentsButton.SearchProperties[WinButton.PropertyNames.Name] = "My Documents";
                    this.mUIMyDocumentsButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIMyDocumentsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMyDocumentsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIProjectsTreeItem
        {
            get
            {
                if ((this.mUIProjectsTreeItem == null))
                {
                    this.mUIProjectsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIProjectsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Projects";
                    this.mUIProjectsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIProjectsTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIProjectsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIProjectsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow31 : WinWindow
    {
        
        public UIItemWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIMockingbirdListItem UIMockingbirdListItem
        {
            get
            {
                if ((this.mUIMockingbirdListItem == null))
                {
                    this.mUIMockingbirdListItem = new UIMockingbirdListItem(this);
                }
                return this.mUIMockingbirdListItem;
            }
        }
        
        public UIStandardPacListItem UIStandardPacListItem
        {
            get
            {
                if ((this.mUIStandardPacListItem == null))
                {
                    this.mUIStandardPacListItem = new UIStandardPacListItem(this);
                }
                return this.mUIStandardPacListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMockingbirdListItem mUIMockingbirdListItem;
        
        private UIStandardPacListItem mUIStandardPacListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMockingbirdListItem : WinListItem
    {
        
        public UIMockingbirdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Mockingbird";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIStandardPacListItem : WinListItem
    {
        
        public UIStandardPacListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Standard Pac";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIHPListItem UIHPListItem
        {
            get
            {
                if ((this.mUIHPListItem == null))
                {
                    this.mUIHPListItem = new UIHPListItem(this);
                }
                return this.mUIHPListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHPListItem mUIHPListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHPListItem : WinListItem
    {
        
        public UIHPListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "HP";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow211 : WinWindow
    {
        
        public UIItemWindow211(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIPacsListItem UIPacsListItem
        {
            get
            {
                if ((this.mUIPacsListItem == null))
                {
                    this.mUIPacsListItem = new UIPacsListItem(this);
                }
                return this.mUIPacsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPacsListItem mUIPacsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPacsListItem : WinListItem
    {
        
        public UIPacsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Pacs";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UITreeViewWindow1 UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow1(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow22 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow22(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow112 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow112(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow1 UISaveWindow1
        {
            get
            {
                if ((this.mUISaveWindow1 == null))
                {
                    this.mUISaveWindow1 = new UISaveWindow1(this);
                }
                return this.mUISaveWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow7 mUIItemWindow;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UISaveWindow mUISaveWindow;
        
        private UITreeViewWindow1 mUITreeViewWindow;
        
        private UIItemWindow22 mUIItemWindow2;
        
        private UIItemWindow112 mUIItemWindow11;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow1 mUISaveWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1184";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIMyDocumentsButton
        {
            get
            {
                if ((this.mUIMyDocumentsButton == null))
                {
                    this.mUIMyDocumentsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMyDocumentsButton.SearchProperties[WinButton.PropertyNames.Name] = "My Documents";
                    this.mUIMyDocumentsButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIMyDocumentsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMyDocumentsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewWindow1 : WinWindow
    {
        
        public UITreeViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree1 UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree1(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree1 mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewTree1 : WinTree
    {
        
        public UITreeViewTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem1 UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem1(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem1 mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFavoritesTreeItem1 : WinTreeItem
    {
        
        public UIFavoritesTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIProjectsTreeItem
        {
            get
            {
                if ((this.mUIProjectsTreeItem == null))
                {
                    this.mUIProjectsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIProjectsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Projects";
                    this.mUIProjectsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIProjectsTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIProjectsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIProjectsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow22 : WinWindow
    {
        
        public UIItemWindow22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIMockingbirdListItem1 UIMockingbirdListItem
        {
            get
            {
                if ((this.mUIMockingbirdListItem == null))
                {
                    this.mUIMockingbirdListItem = new UIMockingbirdListItem1(this);
                }
                return this.mUIMockingbirdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMockingbirdListItem1 mUIMockingbirdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMockingbirdListItem1 : WinListItem
    {
        
        public UIMockingbirdListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Mockingbird";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow112 : WinWindow
    {
        
        public UIItemWindow112(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIHPListItem1 UIHPListItem
        {
            get
            {
                if ((this.mUIHPListItem == null))
                {
                    this.mUIHPListItem = new UIHPListItem1(this);
                }
                return this.mUIHPListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHPListItem1 mUIHPListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHPListItem1 : WinListItem
    {
        
        public UIHPListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "HP";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UIShortcuttoMockingbirListItem
        {
            get
            {
                if ((this.mUIShortcuttoMockingbirListItem == null))
                {
                    this.mUIShortcuttoMockingbirListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIShortcuttoMockingbirListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Shortcut to Mockingbird.HP.HP97.exe";
                    this.mUIShortcuttoMockingbirListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIShortcuttoMockingbirListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIShortcuttoMockingbirListItem;
        #endregion
    }
}
