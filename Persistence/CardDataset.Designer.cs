//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Mockingbird.HP.Persistence {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CardDataset")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CardDataset : global::System.Data.DataSet {
        
        private CardDataTable tableCard;
        
        private CardSlotDataTable tableCardSlot;
        
        private TextBoxDataTable tableTextBox;
        
        private RTFBoxDataTable tableRTFBox;
        
        private DisplayDataTable tableDisplay;
        
        private EngineDataTable tableEngine;
        
        private FlagDataTable tableFlag;
        
        private MemoryDataTable tableMemory;
        
        private RegisterDataTable tableRegister;
        
        private ProgramDataTable tableProgram;
        
        private InstructionDataTable tableInstruction;
        
        private ArgumentDataTable tableArgument;
        
        private LabelDataTable tableLabel;
        
        private StepDataTable tableStep;
        
        private global::System.Data.DataRelation relationCard_CardSlot;
        
        private global::System.Data.DataRelation relationCardSlot_TextBox;
        
        private global::System.Data.DataRelation relationCardSlot_RTFBox;
        
        private global::System.Data.DataRelation relationCard_Display;
        
        private global::System.Data.DataRelation relationCard_Engine;
        
        private global::System.Data.DataRelation relationEngine_Flag;
        
        private global::System.Data.DataRelation relationCard_Memory;
        
        private global::System.Data.DataRelation relationMemory_Register;
        
        private global::System.Data.DataRelation relationCard_Program;
        
        private global::System.Data.DataRelation relationProgram_Instruction;
        
        private global::System.Data.DataRelation relationInstruction_Argument;
        
        private global::System.Data.DataRelation relationProgram_Label;
        
        private global::System.Data.DataRelation relationLabel_Step;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CardDataset() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CardDataset(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Card"] != null)) {
                    base.Tables.Add(new CardDataTable(ds.Tables["Card"]));
                }
                if ((ds.Tables["CardSlot"] != null)) {
                    base.Tables.Add(new CardSlotDataTable(ds.Tables["CardSlot"]));
                }
                if ((ds.Tables["TextBox"] != null)) {
                    base.Tables.Add(new TextBoxDataTable(ds.Tables["TextBox"]));
                }
                if ((ds.Tables["RTFBox"] != null)) {
                    base.Tables.Add(new RTFBoxDataTable(ds.Tables["RTFBox"]));
                }
                if ((ds.Tables["Display"] != null)) {
                    base.Tables.Add(new DisplayDataTable(ds.Tables["Display"]));
                }
                if ((ds.Tables["Engine"] != null)) {
                    base.Tables.Add(new EngineDataTable(ds.Tables["Engine"]));
                }
                if ((ds.Tables["Flag"] != null)) {
                    base.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
                }
                if ((ds.Tables["Memory"] != null)) {
                    base.Tables.Add(new MemoryDataTable(ds.Tables["Memory"]));
                }
                if ((ds.Tables["Register"] != null)) {
                    base.Tables.Add(new RegisterDataTable(ds.Tables["Register"]));
                }
                if ((ds.Tables["Program"] != null)) {
                    base.Tables.Add(new ProgramDataTable(ds.Tables["Program"]));
                }
                if ((ds.Tables["Instruction"] != null)) {
                    base.Tables.Add(new InstructionDataTable(ds.Tables["Instruction"]));
                }
                if ((ds.Tables["Argument"] != null)) {
                    base.Tables.Add(new ArgumentDataTable(ds.Tables["Argument"]));
                }
                if ((ds.Tables["Label"] != null)) {
                    base.Tables.Add(new LabelDataTable(ds.Tables["Label"]));
                }
                if ((ds.Tables["Step"] != null)) {
                    base.Tables.Add(new StepDataTable(ds.Tables["Step"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CardDataTable Card {
            get {
                return this.tableCard;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CardSlotDataTable CardSlot {
            get {
                return this.tableCardSlot;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TextBoxDataTable TextBox {
            get {
                return this.tableTextBox;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RTFBoxDataTable RTFBox {
            get {
                return this.tableRTFBox;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DisplayDataTable Display {
            get {
                return this.tableDisplay;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EngineDataTable Engine {
            get {
                return this.tableEngine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlagDataTable Flag {
            get {
                return this.tableFlag;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MemoryDataTable Memory {
            get {
                return this.tableMemory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegisterDataTable Register {
            get {
                return this.tableRegister;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProgramDataTable Program {
            get {
                return this.tableProgram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InstructionDataTable Instruction {
            get {
                return this.tableInstruction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ArgumentDataTable Argument {
            get {
                return this.tableArgument;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabelDataTable Label {
            get {
                return this.tableLabel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StepDataTable Step {
            get {
                return this.tableStep;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CardDataset cln = ((CardDataset)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Card"] != null)) {
                    base.Tables.Add(new CardDataTable(ds.Tables["Card"]));
                }
                if ((ds.Tables["CardSlot"] != null)) {
                    base.Tables.Add(new CardSlotDataTable(ds.Tables["CardSlot"]));
                }
                if ((ds.Tables["TextBox"] != null)) {
                    base.Tables.Add(new TextBoxDataTable(ds.Tables["TextBox"]));
                }
                if ((ds.Tables["RTFBox"] != null)) {
                    base.Tables.Add(new RTFBoxDataTable(ds.Tables["RTFBox"]));
                }
                if ((ds.Tables["Display"] != null)) {
                    base.Tables.Add(new DisplayDataTable(ds.Tables["Display"]));
                }
                if ((ds.Tables["Engine"] != null)) {
                    base.Tables.Add(new EngineDataTable(ds.Tables["Engine"]));
                }
                if ((ds.Tables["Flag"] != null)) {
                    base.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
                }
                if ((ds.Tables["Memory"] != null)) {
                    base.Tables.Add(new MemoryDataTable(ds.Tables["Memory"]));
                }
                if ((ds.Tables["Register"] != null)) {
                    base.Tables.Add(new RegisterDataTable(ds.Tables["Register"]));
                }
                if ((ds.Tables["Program"] != null)) {
                    base.Tables.Add(new ProgramDataTable(ds.Tables["Program"]));
                }
                if ((ds.Tables["Instruction"] != null)) {
                    base.Tables.Add(new InstructionDataTable(ds.Tables["Instruction"]));
                }
                if ((ds.Tables["Argument"] != null)) {
                    base.Tables.Add(new ArgumentDataTable(ds.Tables["Argument"]));
                }
                if ((ds.Tables["Label"] != null)) {
                    base.Tables.Add(new LabelDataTable(ds.Tables["Label"]));
                }
                if ((ds.Tables["Step"] != null)) {
                    base.Tables.Add(new StepDataTable(ds.Tables["Step"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCard = ((CardDataTable)(base.Tables["Card"]));
            if ((initTable == true)) {
                if ((this.tableCard != null)) {
                    this.tableCard.InitVars();
                }
            }
            this.tableCardSlot = ((CardSlotDataTable)(base.Tables["CardSlot"]));
            if ((initTable == true)) {
                if ((this.tableCardSlot != null)) {
                    this.tableCardSlot.InitVars();
                }
            }
            this.tableTextBox = ((TextBoxDataTable)(base.Tables["TextBox"]));
            if ((initTable == true)) {
                if ((this.tableTextBox != null)) {
                    this.tableTextBox.InitVars();
                }
            }
            this.tableRTFBox = ((RTFBoxDataTable)(base.Tables["RTFBox"]));
            if ((initTable == true)) {
                if ((this.tableRTFBox != null)) {
                    this.tableRTFBox.InitVars();
                }
            }
            this.tableDisplay = ((DisplayDataTable)(base.Tables["Display"]));
            if ((initTable == true)) {
                if ((this.tableDisplay != null)) {
                    this.tableDisplay.InitVars();
                }
            }
            this.tableEngine = ((EngineDataTable)(base.Tables["Engine"]));
            if ((initTable == true)) {
                if ((this.tableEngine != null)) {
                    this.tableEngine.InitVars();
                }
            }
            this.tableFlag = ((FlagDataTable)(base.Tables["Flag"]));
            if ((initTable == true)) {
                if ((this.tableFlag != null)) {
                    this.tableFlag.InitVars();
                }
            }
            this.tableMemory = ((MemoryDataTable)(base.Tables["Memory"]));
            if ((initTable == true)) {
                if ((this.tableMemory != null)) {
                    this.tableMemory.InitVars();
                }
            }
            this.tableRegister = ((RegisterDataTable)(base.Tables["Register"]));
            if ((initTable == true)) {
                if ((this.tableRegister != null)) {
                    this.tableRegister.InitVars();
                }
            }
            this.tableProgram = ((ProgramDataTable)(base.Tables["Program"]));
            if ((initTable == true)) {
                if ((this.tableProgram != null)) {
                    this.tableProgram.InitVars();
                }
            }
            this.tableInstruction = ((InstructionDataTable)(base.Tables["Instruction"]));
            if ((initTable == true)) {
                if ((this.tableInstruction != null)) {
                    this.tableInstruction.InitVars();
                }
            }
            this.tableArgument = ((ArgumentDataTable)(base.Tables["Argument"]));
            if ((initTable == true)) {
                if ((this.tableArgument != null)) {
                    this.tableArgument.InitVars();
                }
            }
            this.tableLabel = ((LabelDataTable)(base.Tables["Label"]));
            if ((initTable == true)) {
                if ((this.tableLabel != null)) {
                    this.tableLabel.InitVars();
                }
            }
            this.tableStep = ((StepDataTable)(base.Tables["Step"]));
            if ((initTable == true)) {
                if ((this.tableStep != null)) {
                    this.tableStep.InitVars();
                }
            }
            this.relationCard_CardSlot = this.Relations["Card_CardSlot"];
            this.relationCardSlot_TextBox = this.Relations["CardSlot_TextBox"];
            this.relationCardSlot_RTFBox = this.Relations["CardSlot_RTFBox"];
            this.relationCard_Display = this.Relations["Card_Display"];
            this.relationCard_Engine = this.Relations["Card_Engine"];
            this.relationEngine_Flag = this.Relations["Engine_Flag"];
            this.relationCard_Memory = this.Relations["Card_Memory"];
            this.relationMemory_Register = this.Relations["Memory_Register"];
            this.relationCard_Program = this.Relations["Card_Program"];
            this.relationProgram_Instruction = this.Relations["Program_Instruction"];
            this.relationInstruction_Argument = this.Relations["Instruction_Argument"];
            this.relationProgram_Label = this.Relations["Program_Label"];
            this.relationLabel_Step = this.Relations["Label_Step"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CardDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CardDataset.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCard = new CardDataTable();
            base.Tables.Add(this.tableCard);
            this.tableCardSlot = new CardSlotDataTable();
            base.Tables.Add(this.tableCardSlot);
            this.tableTextBox = new TextBoxDataTable();
            base.Tables.Add(this.tableTextBox);
            this.tableRTFBox = new RTFBoxDataTable();
            base.Tables.Add(this.tableRTFBox);
            this.tableDisplay = new DisplayDataTable();
            base.Tables.Add(this.tableDisplay);
            this.tableEngine = new EngineDataTable();
            base.Tables.Add(this.tableEngine);
            this.tableFlag = new FlagDataTable();
            base.Tables.Add(this.tableFlag);
            this.tableMemory = new MemoryDataTable();
            base.Tables.Add(this.tableMemory);
            this.tableRegister = new RegisterDataTable();
            base.Tables.Add(this.tableRegister);
            this.tableProgram = new ProgramDataTable();
            base.Tables.Add(this.tableProgram);
            this.tableInstruction = new InstructionDataTable();
            base.Tables.Add(this.tableInstruction);
            this.tableArgument = new ArgumentDataTable();
            base.Tables.Add(this.tableArgument);
            this.tableLabel = new LabelDataTable();
            base.Tables.Add(this.tableLabel);
            this.tableStep = new StepDataTable();
            base.Tables.Add(this.tableStep);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("Card_CardSlot", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCardSlot.Card_IdColumn});
            this.tableCardSlot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CardSlot_TextBox", new global::System.Data.DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTextBox.CardSlot_IdColumn});
            this.tableTextBox.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CardSlot_RTFBox", new global::System.Data.DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRTFBox.CardSlot_IdColumn});
            this.tableRTFBox.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Card_Display", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDisplay.Card_IdColumn});
            this.tableDisplay.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Card_Engine", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableEngine.Card_IdColumn});
            this.tableEngine.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Engine_Flag", new global::System.Data.DataColumn[] {
                        this.tableEngine.Engine_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFlag.Engine_IdColumn});
            this.tableFlag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Card_Memory", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMemory.Card_IdColumn});
            this.tableMemory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Memory_Register", new global::System.Data.DataColumn[] {
                        this.tableMemory.Memory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRegister.Memory_IdColumn});
            this.tableRegister.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Card_Program", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProgram.Card_IdColumn});
            this.tableProgram.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Program_Instruction", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInstruction.Program_IdColumn});
            this.tableInstruction.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Instruction_Argument", new global::System.Data.DataColumn[] {
                        this.tableInstruction.Instruction_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableArgument.Instruction_IdColumn});
            this.tableArgument.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Program_Label", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLabel.Program_IdColumn});
            this.tableLabel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Label_Step", new global::System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStep.Label_IdColumn});
            this.tableStep.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationCard_CardSlot = new global::System.Data.DataRelation("Card_CardSlot", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCardSlot.Card_IdColumn}, false);
            this.relationCard_CardSlot.Nested = true;
            this.Relations.Add(this.relationCard_CardSlot);
            this.relationCardSlot_TextBox = new global::System.Data.DataRelation("CardSlot_TextBox", new global::System.Data.DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTextBox.CardSlot_IdColumn}, false);
            this.relationCardSlot_TextBox.Nested = true;
            this.Relations.Add(this.relationCardSlot_TextBox);
            this.relationCardSlot_RTFBox = new global::System.Data.DataRelation("CardSlot_RTFBox", new global::System.Data.DataColumn[] {
                        this.tableCardSlot.CardSlot_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRTFBox.CardSlot_IdColumn}, false);
            this.relationCardSlot_RTFBox.Nested = true;
            this.Relations.Add(this.relationCardSlot_RTFBox);
            this.relationCard_Display = new global::System.Data.DataRelation("Card_Display", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDisplay.Card_IdColumn}, false);
            this.relationCard_Display.Nested = true;
            this.Relations.Add(this.relationCard_Display);
            this.relationCard_Engine = new global::System.Data.DataRelation("Card_Engine", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableEngine.Card_IdColumn}, false);
            this.relationCard_Engine.Nested = true;
            this.Relations.Add(this.relationCard_Engine);
            this.relationEngine_Flag = new global::System.Data.DataRelation("Engine_Flag", new global::System.Data.DataColumn[] {
                        this.tableEngine.Engine_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFlag.Engine_IdColumn}, false);
            this.relationEngine_Flag.Nested = true;
            this.Relations.Add(this.relationEngine_Flag);
            this.relationCard_Memory = new global::System.Data.DataRelation("Card_Memory", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMemory.Card_IdColumn}, false);
            this.relationCard_Memory.Nested = true;
            this.Relations.Add(this.relationCard_Memory);
            this.relationMemory_Register = new global::System.Data.DataRelation("Memory_Register", new global::System.Data.DataColumn[] {
                        this.tableMemory.Memory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRegister.Memory_IdColumn}, false);
            this.relationMemory_Register.Nested = true;
            this.Relations.Add(this.relationMemory_Register);
            this.relationCard_Program = new global::System.Data.DataRelation("Card_Program", new global::System.Data.DataColumn[] {
                        this.tableCard.Card_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProgram.Card_IdColumn}, false);
            this.relationCard_Program.Nested = true;
            this.Relations.Add(this.relationCard_Program);
            this.relationProgram_Instruction = new global::System.Data.DataRelation("Program_Instruction", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInstruction.Program_IdColumn}, false);
            this.relationProgram_Instruction.Nested = true;
            this.Relations.Add(this.relationProgram_Instruction);
            this.relationInstruction_Argument = new global::System.Data.DataRelation("Instruction_Argument", new global::System.Data.DataColumn[] {
                        this.tableInstruction.Instruction_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableArgument.Instruction_IdColumn}, false);
            this.relationInstruction_Argument.Nested = true;
            this.Relations.Add(this.relationInstruction_Argument);
            this.relationProgram_Label = new global::System.Data.DataRelation("Program_Label", new global::System.Data.DataColumn[] {
                        this.tableProgram.Program_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLabel.Program_IdColumn}, false);
            this.relationProgram_Label.Nested = true;
            this.Relations.Add(this.relationProgram_Label);
            this.relationLabel_Step = new global::System.Data.DataRelation("Label_Step", new global::System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStep.Label_IdColumn}, false);
            this.relationLabel_Step.Nested = true;
            this.Relations.Add(this.relationLabel_Step);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCard() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCardSlot() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTextBox() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRTFBox() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDisplay() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEngine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlag() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMemory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRegister() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProgram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInstruction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArgument() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStep() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CardDataset ds = new CardDataset();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CardRowChangeEventHandler(object sender, CardRowChangeEvent e);
        
        public delegate void CardSlotRowChangeEventHandler(object sender, CardSlotRowChangeEvent e);
        
        public delegate void TextBoxRowChangeEventHandler(object sender, TextBoxRowChangeEvent e);
        
        public delegate void RTFBoxRowChangeEventHandler(object sender, RTFBoxRowChangeEvent e);
        
        public delegate void DisplayRowChangeEventHandler(object sender, DisplayRowChangeEvent e);
        
        public delegate void EngineRowChangeEventHandler(object sender, EngineRowChangeEvent e);
        
        public delegate void FlagRowChangeEventHandler(object sender, FlagRowChangeEvent e);
        
        public delegate void MemoryRowChangeEventHandler(object sender, MemoryRowChangeEvent e);
        
        public delegate void RegisterRowChangeEventHandler(object sender, RegisterRowChangeEvent e);
        
        public delegate void ProgramRowChangeEventHandler(object sender, ProgramRowChangeEvent e);
        
        public delegate void InstructionRowChangeEventHandler(object sender, InstructionRowChangeEvent e);
        
        public delegate void ArgumentRowChangeEventHandler(object sender, ArgumentRowChangeEvent e);
        
        public delegate void LabelRowChangeEventHandler(object sender, LabelRowChangeEvent e);
        
        public delegate void StepRowChangeEventHandler(object sender, StepRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CardDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCard_Id;
            
            private global::System.Data.DataColumn columnVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardDataTable() {
                this.TableName = "Card";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CardDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow this[int index] {
                get {
                    return ((CardRow)(this.Rows[index]));
                }
            }
            
            public event CardRowChangeEventHandler CardRowChanging;
            
            public event CardRowChangeEventHandler CardRowChanged;
            
            public event CardRowChangeEventHandler CardRowDeleting;
            
            public event CardRowChangeEventHandler CardRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCardRow(CardRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow AddCardRow(float Version) {
                CardRow rowCardRow = ((CardRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Version};
                rowCardRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCardRow);
                return rowCardRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CardDataTable cln = ((CardDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CardDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCard_Id = base.Columns["Card_Id"];
                this.columnVersion = base.Columns["Version"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCard_Id = new global::System.Data.DataColumn("Card_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCard_Id);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCard_Id}, true));
                this.columnCard_Id.AutoIncrement = true;
                this.columnCard_Id.AllowDBNull = false;
                this.columnCard_Id.Unique = true;
                this.columnCard_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow NewCardRow() {
                return ((CardRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CardRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CardRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CardRowChanged != null)) {
                    this.CardRowChanged(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CardRowChanging != null)) {
                    this.CardRowChanging(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CardRowDeleted != null)) {
                    this.CardRowDeleted(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CardRowDeleting != null)) {
                    this.CardRowDeleting(this, new CardRowChangeEvent(((CardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCardRow(CardRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CardDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CardSlotDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCardSlot_Id;
            
            private global::System.Data.DataColumn columnCard_Id;
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnLargeFontName;
            
            private global::System.Data.DataColumn columnLargeFontSize;
            
            private global::System.Data.DataColumn columnTextTitle;
            
            private global::System.Data.DataColumn columnRTFTitle;
            
            private global::System.Data.DataColumn columnMargin;
            
            private global::System.Data.DataColumn columnTextBoxWidth;
            
            private global::System.Data.DataColumn columnIsRichText;
            
            private global::System.Data.DataColumn columnTextBoxCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotDataTable() {
                this.TableName = "CardSlot";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardSlotDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CardSlotDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CardSlot_IdColumn {
                get {
                    return this.columnCardSlot_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LargeFontNameColumn {
                get {
                    return this.columnLargeFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LargeFontSizeColumn {
                get {
                    return this.columnLargeFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextTitleColumn {
                get {
                    return this.columnTextTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RTFTitleColumn {
                get {
                    return this.columnRTFTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarginColumn {
                get {
                    return this.columnMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextBoxWidthColumn {
                get {
                    return this.columnTextBoxWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRichTextColumn {
                get {
                    return this.columnIsRichText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextBoxCountColumn {
                get {
                    return this.columnTextBoxCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRow this[int index] {
                get {
                    return ((CardSlotRow)(this.Rows[index]));
                }
            }
            
            public event CardSlotRowChangeEventHandler CardSlotRowChanging;
            
            public event CardSlotRowChangeEventHandler CardSlotRowChanged;
            
            public event CardSlotRowChangeEventHandler CardSlotRowDeleting;
            
            public event CardSlotRowChangeEventHandler CardSlotRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCardSlotRow(CardSlotRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRow AddCardSlotRow(CardRow parentCardRowByCard_CardSlot, string FontName, float FontSize, string LargeFontName, float LargeFontSize, string TextTitle, string RTFTitle, int Margin, int TextBoxWidth, bool IsRichText, int TextBoxCount) {
                CardSlotRow rowCardSlotRow = ((CardSlotRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        FontName,
                        FontSize,
                        LargeFontName,
                        LargeFontSize,
                        TextTitle,
                        RTFTitle,
                        Margin,
                        TextBoxWidth,
                        IsRichText,
                        TextBoxCount};
                if ((parentCardRowByCard_CardSlot != null)) {
                    columnValuesArray[1] = parentCardRowByCard_CardSlot[0];
                }
                rowCardSlotRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCardSlotRow);
                return rowCardSlotRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CardSlotDataTable cln = ((CardSlotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CardSlotDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCardSlot_Id = base.Columns["CardSlot_Id"];
                this.columnCard_Id = base.Columns["Card_Id"];
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnLargeFontName = base.Columns["LargeFontName"];
                this.columnLargeFontSize = base.Columns["LargeFontSize"];
                this.columnTextTitle = base.Columns["TextTitle"];
                this.columnRTFTitle = base.Columns["RTFTitle"];
                this.columnMargin = base.Columns["Margin"];
                this.columnTextBoxWidth = base.Columns["TextBoxWidth"];
                this.columnIsRichText = base.Columns["IsRichText"];
                this.columnTextBoxCount = base.Columns["TextBoxCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCardSlot_Id = new global::System.Data.DataColumn("CardSlot_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCardSlot_Id);
                this.columnCard_Id = new global::System.Data.DataColumn("Card_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCard_Id);
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontSize);
                this.columnLargeFontName = new global::System.Data.DataColumn("LargeFontName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLargeFontName);
                this.columnLargeFontSize = new global::System.Data.DataColumn("LargeFontSize", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLargeFontSize);
                this.columnTextTitle = new global::System.Data.DataColumn("TextTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextTitle);
                this.columnRTFTitle = new global::System.Data.DataColumn("RTFTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRTFTitle);
                this.columnMargin = new global::System.Data.DataColumn("Margin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMargin);
                this.columnTextBoxWidth = new global::System.Data.DataColumn("TextBoxWidth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextBoxWidth);
                this.columnIsRichText = new global::System.Data.DataColumn("IsRichText", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRichText);
                this.columnTextBoxCount = new global::System.Data.DataColumn("TextBoxCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextBoxCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCardSlot_Id}, true));
                this.columnCardSlot_Id.AutoIncrement = true;
                this.columnCardSlot_Id.AllowDBNull = false;
                this.columnCardSlot_Id.Unique = true;
                this.columnCardSlot_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnCard_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnFontName.AllowDBNull = false;
                this.columnLargeFontName.AllowDBNull = false;
                this.columnMargin.AllowDBNull = false;
                this.columnTextBoxWidth.AllowDBNull = false;
                this.columnIsRichText.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRow NewCardSlotRow() {
                return ((CardSlotRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CardSlotRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CardSlotRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CardSlotRowChanged != null)) {
                    this.CardSlotRowChanged(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CardSlotRowChanging != null)) {
                    this.CardSlotRowChanging(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CardSlotRowDeleted != null)) {
                    this.CardSlotRowDeleted(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CardSlotRowDeleting != null)) {
                    this.CardSlotRowDeleting(this, new CardSlotRowChangeEvent(((CardSlotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCardSlotRow(CardSlotRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CardSlotDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TextBoxDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCardSlot_Id;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TextBoxDataTable() {
                this.TableName = "TextBox";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TextBoxDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TextBoxDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CardSlot_IdColumn {
                get {
                    return this.columnCardSlot_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TextBoxRow this[int index] {
                get {
                    return ((TextBoxRow)(this.Rows[index]));
                }
            }
            
            public event TextBoxRowChangeEventHandler TextBoxRowChanging;
            
            public event TextBoxRowChangeEventHandler TextBoxRowChanged;
            
            public event TextBoxRowChangeEventHandler TextBoxRowDeleting;
            
            public event TextBoxRowChangeEventHandler TextBoxRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTextBoxRow(TextBoxRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TextBoxRow AddTextBoxRow(CardSlotRow parentCardSlotRowByCardSlot_TextBox, int Id, string Text) {
                TextBoxRow rowTextBoxRow = ((TextBoxRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Id,
                        Text};
                if ((parentCardSlotRowByCardSlot_TextBox != null)) {
                    columnValuesArray[0] = parentCardSlotRowByCardSlot_TextBox[0];
                }
                rowTextBoxRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTextBoxRow);
                return rowTextBoxRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TextBoxDataTable cln = ((TextBoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TextBoxDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCardSlot_Id = base.Columns["CardSlot_Id"];
                this.columnId = base.Columns["Id"];
                this.columnText = base.Columns["Text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCardSlot_Id = new global::System.Data.DataColumn("CardSlot_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCardSlot_Id);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.columnCardSlot_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnText.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TextBoxRow NewTextBoxRow() {
                return ((TextBoxRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TextBoxRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TextBoxRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TextBoxRowChanged != null)) {
                    this.TextBoxRowChanged(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TextBoxRowChanging != null)) {
                    this.TextBoxRowChanging(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TextBoxRowDeleted != null)) {
                    this.TextBoxRowDeleted(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TextBoxRowDeleting != null)) {
                    this.TextBoxRowDeleting(this, new TextBoxRowChangeEvent(((TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTextBoxRow(TextBoxRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TextBoxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RTFBoxDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCardSlot_Id;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnRTF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTFBoxDataTable() {
                this.TableName = "RTFBox";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RTFBoxDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RTFBoxDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CardSlot_IdColumn {
                get {
                    return this.columnCardSlot_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RTFColumn {
                get {
                    return this.columnRTF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTFBoxRow this[int index] {
                get {
                    return ((RTFBoxRow)(this.Rows[index]));
                }
            }
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowChanging;
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowChanged;
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowDeleting;
            
            public event RTFBoxRowChangeEventHandler RTFBoxRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRTFBoxRow(RTFBoxRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTFBoxRow AddRTFBoxRow(CardSlotRow parentCardSlotRowByCardSlot_RTFBox, int Id, string RTF) {
                RTFBoxRow rowRTFBoxRow = ((RTFBoxRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Id,
                        RTF};
                if ((parentCardSlotRowByCardSlot_RTFBox != null)) {
                    columnValuesArray[0] = parentCardSlotRowByCardSlot_RTFBox[0];
                }
                rowRTFBoxRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRTFBoxRow);
                return rowRTFBoxRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RTFBoxDataTable cln = ((RTFBoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RTFBoxDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCardSlot_Id = base.Columns["CardSlot_Id"];
                this.columnId = base.Columns["Id"];
                this.columnRTF = base.Columns["RTF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCardSlot_Id = new global::System.Data.DataColumn("CardSlot_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCardSlot_Id);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnRTF = new global::System.Data.DataColumn("RTF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRTF);
                this.columnCardSlot_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnRTF.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTFBoxRow NewRTFBoxRow() {
                return ((RTFBoxRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RTFBoxRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RTFBoxRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RTFBoxRowChanged != null)) {
                    this.RTFBoxRowChanged(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RTFBoxRowChanging != null)) {
                    this.RTFBoxRowChanging(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RTFBoxRowDeleted != null)) {
                    this.RTFBoxRowDeleted(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RTFBoxRowDeleting != null)) {
                    this.RTFBoxRowDeleting(this, new RTFBoxRowChangeEvent(((RTFBoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRTFBoxRow(RTFBoxRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RTFBoxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DisplayDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCard_Id;
            
            private global::System.Data.DataColumn columnFormat;
            
            private global::System.Data.DataColumn columnDigits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisplayDataTable() {
                this.TableName = "Display";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DisplayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DisplayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormatColumn {
                get {
                    return this.columnFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigitsColumn {
                get {
                    return this.columnDigits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisplayRow this[int index] {
                get {
                    return ((DisplayRow)(this.Rows[index]));
                }
            }
            
            public event DisplayRowChangeEventHandler DisplayRowChanging;
            
            public event DisplayRowChangeEventHandler DisplayRowChanged;
            
            public event DisplayRowChangeEventHandler DisplayRowDeleting;
            
            public event DisplayRowChangeEventHandler DisplayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDisplayRow(DisplayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisplayRow AddDisplayRow(CardRow parentCardRowByCard_Display, string Format, byte Digits) {
                DisplayRow rowDisplayRow = ((DisplayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Format,
                        Digits};
                if ((parentCardRowByCard_Display != null)) {
                    columnValuesArray[0] = parentCardRowByCard_Display[0];
                }
                rowDisplayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDisplayRow);
                return rowDisplayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DisplayDataTable cln = ((DisplayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DisplayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCard_Id = base.Columns["Card_Id"];
                this.columnFormat = base.Columns["Format"];
                this.columnDigits = base.Columns["Digits"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCard_Id = new global::System.Data.DataColumn("Card_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCard_Id);
                this.columnFormat = new global::System.Data.DataColumn("Format", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormat);
                this.columnDigits = new global::System.Data.DataColumn("Digits", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigits);
                this.columnCard_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnFormat.AllowDBNull = false;
                this.columnDigits.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisplayRow NewDisplayRow() {
                return ((DisplayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DisplayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DisplayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DisplayRowChanged != null)) {
                    this.DisplayRowChanged(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DisplayRowChanging != null)) {
                    this.DisplayRowChanging(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DisplayRowDeleted != null)) {
                    this.DisplayRowDeleted(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DisplayRowDeleting != null)) {
                    this.DisplayRowDeleting(this, new DisplayRowChangeEvent(((DisplayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDisplayRow(DisplayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DisplayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EngineDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEngine_Id;
            
            private global::System.Data.DataColumn columnCard_Id;
            
            private global::System.Data.DataColumn columnAngleUnit;
            
            private global::System.Data.DataColumn columnFlagCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineDataTable() {
                this.TableName = "Engine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EngineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EngineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Engine_IdColumn {
                get {
                    return this.columnEngine_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AngleUnitColumn {
                get {
                    return this.columnAngleUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagCountColumn {
                get {
                    return this.columnFlagCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineRow this[int index] {
                get {
                    return ((EngineRow)(this.Rows[index]));
                }
            }
            
            public event EngineRowChangeEventHandler EngineRowChanging;
            
            public event EngineRowChangeEventHandler EngineRowChanged;
            
            public event EngineRowChangeEventHandler EngineRowDeleting;
            
            public event EngineRowChangeEventHandler EngineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEngineRow(EngineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineRow AddEngineRow(CardRow parentCardRowByCard_Engine, string AngleUnit, int FlagCount) {
                EngineRow rowEngineRow = ((EngineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        AngleUnit,
                        FlagCount};
                if ((parentCardRowByCard_Engine != null)) {
                    columnValuesArray[1] = parentCardRowByCard_Engine[0];
                }
                rowEngineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEngineRow);
                return rowEngineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EngineDataTable cln = ((EngineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EngineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEngine_Id = base.Columns["Engine_Id"];
                this.columnCard_Id = base.Columns["Card_Id"];
                this.columnAngleUnit = base.Columns["AngleUnit"];
                this.columnFlagCount = base.Columns["FlagCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEngine_Id = new global::System.Data.DataColumn("Engine_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnEngine_Id);
                this.columnCard_Id = new global::System.Data.DataColumn("Card_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCard_Id);
                this.columnAngleUnit = new global::System.Data.DataColumn("AngleUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAngleUnit);
                this.columnFlagCount = new global::System.Data.DataColumn("FlagCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEngine_Id}, true));
                this.columnEngine_Id.AutoIncrement = true;
                this.columnEngine_Id.AllowDBNull = false;
                this.columnEngine_Id.Unique = true;
                this.columnEngine_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnCard_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnAngleUnit.AllowDBNull = false;
                this.columnFlagCount.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineRow NewEngineRow() {
                return ((EngineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EngineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EngineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EngineRowChanged != null)) {
                    this.EngineRowChanged(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EngineRowChanging != null)) {
                    this.EngineRowChanging(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EngineRowDeleted != null)) {
                    this.EngineRowDeleted(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EngineRowDeleting != null)) {
                    this.EngineRowDeleting(this, new EngineRowChangeEvent(((EngineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEngineRow(EngineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EngineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlagDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEngine_Id;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagDataTable() {
                this.TableName = "Flag";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlagDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlagDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Engine_IdColumn {
                get {
                    return this.columnEngine_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow this[int index] {
                get {
                    return ((FlagRow)(this.Rows[index]));
                }
            }
            
            public event FlagRowChangeEventHandler FlagRowChanging;
            
            public event FlagRowChangeEventHandler FlagRowChanged;
            
            public event FlagRowChangeEventHandler FlagRowDeleting;
            
            public event FlagRowChangeEventHandler FlagRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlagRow(FlagRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow AddFlagRow(EngineRow parentEngineRowByEngine_Flag, int Id, bool Value) {
                FlagRow rowFlagRow = ((FlagRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Id,
                        Value};
                if ((parentEngineRowByEngine_Flag != null)) {
                    columnValuesArray[0] = parentEngineRowByEngine_Flag[0];
                }
                rowFlagRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlagRow);
                return rowFlagRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FlagDataTable cln = ((FlagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlagDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEngine_Id = base.Columns["Engine_Id"];
                this.columnId = base.Columns["Id"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEngine_Id = new global::System.Data.DataColumn("Engine_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnEngine_Id);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnEngine_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnId.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow NewFlagRow() {
                return ((FlagRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlagRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FlagRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlagRowChanged != null)) {
                    this.FlagRowChanged(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlagRowChanging != null)) {
                    this.FlagRowChanging(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlagRowDeleted != null)) {
                    this.FlagRowDeleted(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlagRowDeleting != null)) {
                    this.FlagRowDeleting(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlagRow(FlagRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlagDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MemoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMemory_Id;
            
            private global::System.Data.DataColumn columnCard_Id;
            
            private global::System.Data.DataColumn columnRegisterCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryDataTable() {
                this.TableName = "Memory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MemoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Memory_IdColumn {
                get {
                    return this.columnMemory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegisterCountColumn {
                get {
                    return this.columnRegisterCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryRow this[int index] {
                get {
                    return ((MemoryRow)(this.Rows[index]));
                }
            }
            
            public event MemoryRowChangeEventHandler MemoryRowChanging;
            
            public event MemoryRowChangeEventHandler MemoryRowChanged;
            
            public event MemoryRowChangeEventHandler MemoryRowDeleting;
            
            public event MemoryRowChangeEventHandler MemoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMemoryRow(MemoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryRow AddMemoryRow(CardRow parentCardRowByCard_Memory, int RegisterCount) {
                MemoryRow rowMemoryRow = ((MemoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        RegisterCount};
                if ((parentCardRowByCard_Memory != null)) {
                    columnValuesArray[1] = parentCardRowByCard_Memory[0];
                }
                rowMemoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMemoryRow);
                return rowMemoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MemoryDataTable cln = ((MemoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MemoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemory_Id = base.Columns["Memory_Id"];
                this.columnCard_Id = base.Columns["Card_Id"];
                this.columnRegisterCount = base.Columns["RegisterCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemory_Id = new global::System.Data.DataColumn("Memory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMemory_Id);
                this.columnCard_Id = new global::System.Data.DataColumn("Card_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCard_Id);
                this.columnRegisterCount = new global::System.Data.DataColumn("RegisterCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegisterCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMemory_Id}, true));
                this.columnMemory_Id.AutoIncrement = true;
                this.columnMemory_Id.AllowDBNull = false;
                this.columnMemory_Id.Unique = true;
                this.columnMemory_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnCard_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnRegisterCount.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryRow NewMemoryRow() {
                return ((MemoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MemoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MemoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MemoryRowChanged != null)) {
                    this.MemoryRowChanged(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MemoryRowChanging != null)) {
                    this.MemoryRowChanging(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MemoryRowDeleted != null)) {
                    this.MemoryRowDeleted(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MemoryRowDeleting != null)) {
                    this.MemoryRowDeleting(this, new MemoryRowChangeEvent(((MemoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMemoryRow(MemoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MemoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RegisterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMemory_Id;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnMantissa;
            
            private global::System.Data.DataColumn columnExponent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegisterDataTable() {
                this.TableName = "Register";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegisterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RegisterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Memory_IdColumn {
                get {
                    return this.columnMemory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MantissaColumn {
                get {
                    return this.columnMantissa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExponentColumn {
                get {
                    return this.columnExponent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegisterRow this[int index] {
                get {
                    return ((RegisterRow)(this.Rows[index]));
                }
            }
            
            public event RegisterRowChangeEventHandler RegisterRowChanging;
            
            public event RegisterRowChangeEventHandler RegisterRowChanged;
            
            public event RegisterRowChangeEventHandler RegisterRowDeleting;
            
            public event RegisterRowChangeEventHandler RegisterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRegisterRow(RegisterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegisterRow AddRegisterRow(MemoryRow parentMemoryRowByMemory_Register, int Id, double Value, decimal Mantissa, sbyte Exponent) {
                RegisterRow rowRegisterRow = ((RegisterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Id,
                        Value,
                        Mantissa,
                        Exponent};
                if ((parentMemoryRowByMemory_Register != null)) {
                    columnValuesArray[0] = parentMemoryRowByMemory_Register[0];
                }
                rowRegisterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRegisterRow);
                return rowRegisterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RegisterDataTable cln = ((RegisterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RegisterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemory_Id = base.Columns["Memory_Id"];
                this.columnId = base.Columns["Id"];
                this.columnValue = base.Columns["Value"];
                this.columnMantissa = base.Columns["Mantissa"];
                this.columnExponent = base.Columns["Exponent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemory_Id = new global::System.Data.DataColumn("Memory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMemory_Id);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnMantissa = new global::System.Data.DataColumn("Mantissa", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMantissa);
                this.columnExponent = new global::System.Data.DataColumn("Exponent", typeof(sbyte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExponent);
                this.columnMemory_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegisterRow NewRegisterRow() {
                return ((RegisterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RegisterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RegisterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegisterRowChanged != null)) {
                    this.RegisterRowChanged(this, new RegisterRowChangeEvent(((RegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegisterRowChanging != null)) {
                    this.RegisterRowChanging(this, new RegisterRowChangeEvent(((RegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegisterRowDeleted != null)) {
                    this.RegisterRowDeleted(this, new RegisterRowChangeEvent(((RegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegisterRowDeleting != null)) {
                    this.RegisterRowDeleting(this, new RegisterRowChangeEvent(((RegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRegisterRow(RegisterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RegisterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProgramDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            private global::System.Data.DataColumn columnCard_Id;
            
            private global::System.Data.DataColumn columnInstructionCount;
            
            private global::System.Data.DataColumn columnLabelCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramDataTable() {
                this.TableName = "Program";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProgramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Card_IdColumn {
                get {
                    return this.columnCard_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructionCountColumn {
                get {
                    return this.columnInstructionCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelCountColumn {
                get {
                    return this.columnLabelCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow this[int index] {
                get {
                    return ((ProgramRow)(this.Rows[index]));
                }
            }
            
            public event ProgramRowChangeEventHandler ProgramRowChanging;
            
            public event ProgramRowChangeEventHandler ProgramRowChanged;
            
            public event ProgramRowChangeEventHandler ProgramRowDeleting;
            
            public event ProgramRowChangeEventHandler ProgramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProgramRow(ProgramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow AddProgramRow(CardRow parentCardRowByCard_Program, int InstructionCount, int LabelCount) {
                ProgramRow rowProgramRow = ((ProgramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        InstructionCount,
                        LabelCount};
                if ((parentCardRowByCard_Program != null)) {
                    columnValuesArray[1] = parentCardRowByCard_Program[0];
                }
                rowProgramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProgramRow);
                return rowProgramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProgramDataTable cln = ((ProgramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProgramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgram_Id = base.Columns["Program_Id"];
                this.columnCard_Id = base.Columns["Card_Id"];
                this.columnInstructionCount = base.Columns["InstructionCount"];
                this.columnLabelCount = base.Columns["LabelCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.columnCard_Id = new global::System.Data.DataColumn("Card_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCard_Id);
                this.columnInstructionCount = new global::System.Data.DataColumn("InstructionCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstructionCount);
                this.columnLabelCount = new global::System.Data.DataColumn("LabelCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabelCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProgram_Id}, true));
                this.columnProgram_Id.AutoIncrement = true;
                this.columnProgram_Id.AllowDBNull = false;
                this.columnProgram_Id.Unique = true;
                this.columnProgram_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnCard_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow NewProgramRow() {
                return ((ProgramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProgramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProgramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProgramRowChanged != null)) {
                    this.ProgramRowChanged(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProgramRowChanging != null)) {
                    this.ProgramRowChanging(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProgramRowDeleted != null)) {
                    this.ProgramRowDeleted(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProgramRowDeleting != null)) {
                    this.ProgramRowDeleting(this, new ProgramRowChangeEvent(((ProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProgramRow(ProgramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProgramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InstructionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInstruction_Id;
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            private global::System.Data.DataColumn columnStep;
            
            private global::System.Data.DataColumn columnInstruction;
            
            private global::System.Data.DataColumn columnArgumentCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionDataTable() {
                this.TableName = "Instruction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InstructionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InstructionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Instruction_IdColumn {
                get {
                    return this.columnInstruction_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StepColumn {
                get {
                    return this.columnStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstructionColumn {
                get {
                    return this.columnInstruction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArgumentCountColumn {
                get {
                    return this.columnArgumentCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionRow this[int index] {
                get {
                    return ((InstructionRow)(this.Rows[index]));
                }
            }
            
            public event InstructionRowChangeEventHandler InstructionRowChanging;
            
            public event InstructionRowChangeEventHandler InstructionRowChanged;
            
            public event InstructionRowChangeEventHandler InstructionRowDeleting;
            
            public event InstructionRowChangeEventHandler InstructionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInstructionRow(InstructionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionRow AddInstructionRow(ProgramRow parentProgramRowByProgram_Instruction, int Step, string Instruction, int ArgumentCount) {
                InstructionRow rowInstructionRow = ((InstructionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Step,
                        Instruction,
                        ArgumentCount};
                if ((parentProgramRowByProgram_Instruction != null)) {
                    columnValuesArray[1] = parentProgramRowByProgram_Instruction[0];
                }
                rowInstructionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInstructionRow);
                return rowInstructionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InstructionDataTable cln = ((InstructionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InstructionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInstruction_Id = base.Columns["Instruction_Id"];
                this.columnProgram_Id = base.Columns["Program_Id"];
                this.columnStep = base.Columns["Step"];
                this.columnInstruction = base.Columns["Instruction"];
                this.columnArgumentCount = base.Columns["ArgumentCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInstruction_Id = new global::System.Data.DataColumn("Instruction_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnInstruction_Id);
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.columnStep = new global::System.Data.DataColumn("Step", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStep);
                this.columnInstruction = new global::System.Data.DataColumn("Instruction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstruction);
                this.columnArgumentCount = new global::System.Data.DataColumn("ArgumentCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArgumentCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInstruction_Id}, true));
                this.columnInstruction_Id.AutoIncrement = true;
                this.columnInstruction_Id.AllowDBNull = false;
                this.columnInstruction_Id.Unique = true;
                this.columnInstruction_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnProgram_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnStep.AllowDBNull = false;
                this.columnInstruction.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionRow NewInstructionRow() {
                return ((InstructionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InstructionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InstructionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InstructionRowChanged != null)) {
                    this.InstructionRowChanged(this, new InstructionRowChangeEvent(((InstructionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InstructionRowChanging != null)) {
                    this.InstructionRowChanging(this, new InstructionRowChangeEvent(((InstructionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InstructionRowDeleted != null)) {
                    this.InstructionRowDeleted(this, new InstructionRowChangeEvent(((InstructionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InstructionRowDeleting != null)) {
                    this.InstructionRowDeleting(this, new InstructionRowChangeEvent(((InstructionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInstructionRow(InstructionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InstructionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArgumentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInstruction_Id;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgumentDataTable() {
                this.TableName = "Argument";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArgumentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ArgumentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Instruction_IdColumn {
                get {
                    return this.columnInstruction_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgumentRow this[int index] {
                get {
                    return ((ArgumentRow)(this.Rows[index]));
                }
            }
            
            public event ArgumentRowChangeEventHandler ArgumentRowChanging;
            
            public event ArgumentRowChangeEventHandler ArgumentRowChanged;
            
            public event ArgumentRowChangeEventHandler ArgumentRowDeleting;
            
            public event ArgumentRowChangeEventHandler ArgumentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArgumentRow(ArgumentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgumentRow AddArgumentRow(InstructionRow parentInstructionRowByInstruction_Argument, int Id, string Type, string Value) {
                ArgumentRow rowArgumentRow = ((ArgumentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Id,
                        Type,
                        Value};
                if ((parentInstructionRowByInstruction_Argument != null)) {
                    columnValuesArray[0] = parentInstructionRowByInstruction_Argument[0];
                }
                rowArgumentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowArgumentRow);
                return rowArgumentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ArgumentDataTable cln = ((ArgumentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ArgumentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInstruction_Id = base.Columns["Instruction_Id"];
                this.columnId = base.Columns["Id"];
                this.columnType = base.Columns["Type"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInstruction_Id = new global::System.Data.DataColumn("Instruction_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnInstruction_Id);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnInstruction_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnId.AllowDBNull = false;
                this.columnType.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgumentRow NewArgumentRow() {
                return ((ArgumentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ArgumentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ArgumentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArgumentRowChanged != null)) {
                    this.ArgumentRowChanged(this, new ArgumentRowChangeEvent(((ArgumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArgumentRowChanging != null)) {
                    this.ArgumentRowChanging(this, new ArgumentRowChangeEvent(((ArgumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArgumentRowDeleted != null)) {
                    this.ArgumentRowDeleted(this, new ArgumentRowChangeEvent(((ArgumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArgumentRowDeleting != null)) {
                    this.ArgumentRowDeleting(this, new ArgumentRowChangeEvent(((ArgumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArgumentRow(ArgumentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArgumentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabelDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLabel_Id;
            
            private global::System.Data.DataColumn columnProgram_Id;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnStepCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDataTable() {
                this.TableName = "Label";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Program_IdColumn {
                get {
                    return this.columnProgram_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StepCountColumn {
                get {
                    return this.columnStepCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow this[int index] {
                get {
                    return ((LabelRow)(this.Rows[index]));
                }
            }
            
            public event LabelRowChangeEventHandler LabelRowChanging;
            
            public event LabelRowChangeEventHandler LabelRowChanged;
            
            public event LabelRowChangeEventHandler LabelRowDeleting;
            
            public event LabelRowChangeEventHandler LabelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabelRow(LabelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow AddLabelRow(ProgramRow parentProgramRowByProgram_Label, int Id, int StepCount) {
                LabelRow rowLabelRow = ((LabelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Id,
                        StepCount};
                if ((parentProgramRowByProgram_Label != null)) {
                    columnValuesArray[1] = parentProgramRowByProgram_Label[0];
                }
                rowLabelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabelRow);
                return rowLabelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LabelDataTable cln = ((LabelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LabelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel_Id = base.Columns["Label_Id"];
                this.columnProgram_Id = base.Columns["Program_Id"];
                this.columnId = base.Columns["Id"];
                this.columnStepCount = base.Columns["StepCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel_Id = new global::System.Data.DataColumn("Label_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
                this.columnProgram_Id = new global::System.Data.DataColumn("Program_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProgram_Id);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnStepCount = new global::System.Data.DataColumn("StepCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStepCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLabel_Id}, true));
                this.columnLabel_Id.AutoIncrement = true;
                this.columnLabel_Id.AllowDBNull = false;
                this.columnLabel_Id.Unique = true;
                this.columnLabel_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnProgram_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow NewLabelRow() {
                return ((LabelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LabelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LabelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabelRowChanged != null)) {
                    this.LabelRowChanged(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabelRowChanging != null)) {
                    this.LabelRowChanging(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabelRowDeleted != null)) {
                    this.LabelRowDeleted(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabelRowDeleting != null)) {
                    this.LabelRowDeleting(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabelRow(LabelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StepDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLabel_Id;
            
            private global::System.Data.DataColumn columnStep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StepDataTable() {
                this.TableName = "Step";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StepDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StepDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StepColumn {
                get {
                    return this.columnStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StepRow this[int index] {
                get {
                    return ((StepRow)(this.Rows[index]));
                }
            }
            
            public event StepRowChangeEventHandler StepRowChanging;
            
            public event StepRowChangeEventHandler StepRowChanged;
            
            public event StepRowChangeEventHandler StepRowDeleting;
            
            public event StepRowChangeEventHandler StepRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStepRow(StepRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StepRow AddStepRow(LabelRow parentLabelRowByLabel_Step, int Step) {
                StepRow rowStepRow = ((StepRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Step};
                if ((parentLabelRowByLabel_Step != null)) {
                    columnValuesArray[0] = parentLabelRowByLabel_Step[0];
                }
                rowStepRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStepRow);
                return rowStepRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StepDataTable cln = ((StepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StepDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel_Id = base.Columns["Label_Id"];
                this.columnStep = base.Columns["Step"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel_Id = new global::System.Data.DataColumn("Label_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
                this.columnStep = new global::System.Data.DataColumn("Step", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStep);
                this.columnLabel_Id.Namespace = "http://tempuri.org/CardDataset.xsd";
                this.columnStep.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StepRow NewStepRow() {
                return ((StepRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StepRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StepRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StepRowChanged != null)) {
                    this.StepRowChanged(this, new StepRowChangeEvent(((StepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StepRowChanging != null)) {
                    this.StepRowChanging(this, new StepRowChangeEvent(((StepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StepRowDeleted != null)) {
                    this.StepRowDeleted(this, new StepRowChangeEvent(((StepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StepRowDeleting != null)) {
                    this.StepRowDeleting(this, new StepRowChangeEvent(((StepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStepRow(StepRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CardDataset ds = new CardDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StepDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CardRow : global::System.Data.DataRow {
            
            private CardDataTable tableCard;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCard = ((CardDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_Id {
                get {
                    return ((int)(this[this.tableCard.Card_IdColumn]));
                }
                set {
                    this[this.tableCard.Card_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Version {
                get {
                    try {
                        return ((float)(this[this.tableCard.VersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Version\' in table \'Card\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCard.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNull() {
                return this.IsNull(this.tableCard.VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNull() {
                this[this.tableCard.VersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRow[] GetCardSlotRows() {
                if ((this.Table.ChildRelations["Card_CardSlot"] == null)) {
                    return new CardSlotRow[0];
                }
                else {
                    return ((CardSlotRow[])(base.GetChildRows(this.Table.ChildRelations["Card_CardSlot"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisplayRow[] GetDisplayRows() {
                if ((this.Table.ChildRelations["Card_Display"] == null)) {
                    return new DisplayRow[0];
                }
                else {
                    return ((DisplayRow[])(base.GetChildRows(this.Table.ChildRelations["Card_Display"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineRow[] GetEngineRows() {
                if ((this.Table.ChildRelations["Card_Engine"] == null)) {
                    return new EngineRow[0];
                }
                else {
                    return ((EngineRow[])(base.GetChildRows(this.Table.ChildRelations["Card_Engine"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryRow[] GetMemoryRows() {
                if ((this.Table.ChildRelations["Card_Memory"] == null)) {
                    return new MemoryRow[0];
                }
                else {
                    return ((MemoryRow[])(base.GetChildRows(this.Table.ChildRelations["Card_Memory"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow[] GetProgramRows() {
                if ((this.Table.ChildRelations["Card_Program"] == null)) {
                    return new ProgramRow[0];
                }
                else {
                    return ((ProgramRow[])(base.GetChildRows(this.Table.ChildRelations["Card_Program"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CardSlotRow : global::System.Data.DataRow {
            
            private CardSlotDataTable tableCardSlot;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardSlotRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCardSlot = ((CardSlotDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CardSlot_Id {
                get {
                    return ((int)(this[this.tableCardSlot.CardSlot_IdColumn]));
                }
                set {
                    this[this.tableCardSlot.CardSlot_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_Id {
                get {
                    try {
                        return ((int)(this[this.tableCardSlot.Card_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Card_Id\' in table \'CardSlot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCardSlot.Card_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    return ((string)(this[this.tableCardSlot.FontNameColumn]));
                }
                set {
                    this[this.tableCardSlot.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    try {
                        return ((float)(this[this.tableCardSlot.FontSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontSize\' in table \'CardSlot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCardSlot.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LargeFontName {
                get {
                    return ((string)(this[this.tableCardSlot.LargeFontNameColumn]));
                }
                set {
                    this[this.tableCardSlot.LargeFontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float LargeFontSize {
                get {
                    try {
                        return ((float)(this[this.tableCardSlot.LargeFontSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LargeFontSize\' in table \'CardSlot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCardSlot.LargeFontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TextTitle {
                get {
                    try {
                        return ((string)(this[this.tableCardSlot.TextTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TextTitle\' in table \'CardSlot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCardSlot.TextTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RTFTitle {
                get {
                    try {
                        return ((string)(this[this.tableCardSlot.RTFTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RTFTitle\' in table \'CardSlot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCardSlot.RTFTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Margin {
                get {
                    return ((int)(this[this.tableCardSlot.MarginColumn]));
                }
                set {
                    this[this.tableCardSlot.MarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TextBoxWidth {
                get {
                    return ((int)(this[this.tableCardSlot.TextBoxWidthColumn]));
                }
                set {
                    this[this.tableCardSlot.TextBoxWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRichText {
                get {
                    return ((bool)(this[this.tableCardSlot.IsRichTextColumn]));
                }
                set {
                    this[this.tableCardSlot.IsRichTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TextBoxCount {
                get {
                    try {
                        return ((int)(this[this.tableCardSlot.TextBoxCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TextBoxCount\' in table \'CardSlot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCardSlot.TextBoxCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_CardSlot"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_CardSlot"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCard_IdNull() {
                return this.IsNull(this.tableCardSlot.Card_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCard_IdNull() {
                this[this.tableCardSlot.Card_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontSizeNull() {
                return this.IsNull(this.tableCardSlot.FontSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontSizeNull() {
                this[this.tableCardSlot.FontSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLargeFontSizeNull() {
                return this.IsNull(this.tableCardSlot.LargeFontSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLargeFontSizeNull() {
                this[this.tableCardSlot.LargeFontSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextTitleNull() {
                return this.IsNull(this.tableCardSlot.TextTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextTitleNull() {
                this[this.tableCardSlot.TextTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRTFTitleNull() {
                return this.IsNull(this.tableCardSlot.RTFTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRTFTitleNull() {
                this[this.tableCardSlot.RTFTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextBoxCountNull() {
                return this.IsNull(this.tableCardSlot.TextBoxCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextBoxCountNull() {
                this[this.tableCardSlot.TextBoxCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TextBoxRow[] GetTextBoxRows() {
                if ((this.Table.ChildRelations["CardSlot_TextBox"] == null)) {
                    return new TextBoxRow[0];
                }
                else {
                    return ((TextBoxRow[])(base.GetChildRows(this.Table.ChildRelations["CardSlot_TextBox"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTFBoxRow[] GetRTFBoxRows() {
                if ((this.Table.ChildRelations["CardSlot_RTFBox"] == null)) {
                    return new RTFBoxRow[0];
                }
                else {
                    return ((RTFBoxRow[])(base.GetChildRows(this.Table.ChildRelations["CardSlot_RTFBox"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TextBoxRow : global::System.Data.DataRow {
            
            private TextBoxDataTable tableTextBox;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TextBoxRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTextBox = ((TextBoxDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CardSlot_Id {
                get {
                    try {
                        return ((int)(this[this.tableTextBox.CardSlot_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CardSlot_Id\' in table \'TextBox\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTextBox.CardSlot_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableTextBox.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'TextBox\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTextBox.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    return ((string)(this[this.tableTextBox.TextColumn]));
                }
                set {
                    this[this.tableTextBox.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRow CardSlotRow {
                get {
                    return ((CardSlotRow)(this.GetParentRow(this.Table.ParentRelations["CardSlot_TextBox"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CardSlot_TextBox"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCardSlot_IdNull() {
                return this.IsNull(this.tableTextBox.CardSlot_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCardSlot_IdNull() {
                this[this.tableTextBox.CardSlot_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableTextBox.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableTextBox.IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RTFBoxRow : global::System.Data.DataRow {
            
            private RTFBoxDataTable tableRTFBox;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RTFBoxRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRTFBox = ((RTFBoxDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CardSlot_Id {
                get {
                    try {
                        return ((int)(this[this.tableRTFBox.CardSlot_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CardSlot_Id\' in table \'RTFBox\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTFBox.CardSlot_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableRTFBox.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'RTFBox\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTFBox.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RTF {
                get {
                    return ((string)(this[this.tableRTFBox.RTFColumn]));
                }
                set {
                    this[this.tableRTFBox.RTFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRow CardSlotRow {
                get {
                    return ((CardSlotRow)(this.GetParentRow(this.Table.ParentRelations["CardSlot_RTFBox"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CardSlot_RTFBox"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCardSlot_IdNull() {
                return this.IsNull(this.tableRTFBox.CardSlot_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCardSlot_IdNull() {
                this[this.tableRTFBox.CardSlot_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableRTFBox.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableRTFBox.IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DisplayRow : global::System.Data.DataRow {
            
            private DisplayDataTable tableDisplay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DisplayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDisplay = ((DisplayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_Id {
                get {
                    try {
                        return ((int)(this[this.tableDisplay.Card_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Card_Id\' in table \'Display\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisplay.Card_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Format {
                get {
                    return ((string)(this[this.tableDisplay.FormatColumn]));
                }
                set {
                    this[this.tableDisplay.FormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Digits {
                get {
                    return ((byte)(this[this.tableDisplay.DigitsColumn]));
                }
                set {
                    this[this.tableDisplay.DigitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Display"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Display"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCard_IdNull() {
                return this.IsNull(this.tableDisplay.Card_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCard_IdNull() {
                this[this.tableDisplay.Card_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EngineRow : global::System.Data.DataRow {
            
            private EngineDataTable tableEngine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EngineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEngine = ((EngineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Engine_Id {
                get {
                    return ((int)(this[this.tableEngine.Engine_IdColumn]));
                }
                set {
                    this[this.tableEngine.Engine_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_Id {
                get {
                    try {
                        return ((int)(this[this.tableEngine.Card_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Card_Id\' in table \'Engine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEngine.Card_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AngleUnit {
                get {
                    return ((string)(this[this.tableEngine.AngleUnitColumn]));
                }
                set {
                    this[this.tableEngine.AngleUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlagCount {
                get {
                    return ((int)(this[this.tableEngine.FlagCountColumn]));
                }
                set {
                    this[this.tableEngine.FlagCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Engine"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Engine"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCard_IdNull() {
                return this.IsNull(this.tableEngine.Card_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCard_IdNull() {
                this[this.tableEngine.Card_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow[] GetFlagRows() {
                if ((this.Table.ChildRelations["Engine_Flag"] == null)) {
                    return new FlagRow[0];
                }
                else {
                    return ((FlagRow[])(base.GetChildRows(this.Table.ChildRelations["Engine_Flag"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlagRow : global::System.Data.DataRow {
            
            private FlagDataTable tableFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlagRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlag = ((FlagDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Engine_Id {
                get {
                    try {
                        return ((int)(this[this.tableFlag.Engine_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Engine_Id\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.Engine_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableFlag.IdColumn]));
                }
                set {
                    this[this.tableFlag.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Value {
                get {
                    return ((bool)(this[this.tableFlag.ValueColumn]));
                }
                set {
                    this[this.tableFlag.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineRow EngineRow {
                get {
                    return ((EngineRow)(this.GetParentRow(this.Table.ParentRelations["Engine_Flag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Engine_Flag"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEngine_IdNull() {
                return this.IsNull(this.tableFlag.Engine_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEngine_IdNull() {
                this[this.tableFlag.Engine_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MemoryRow : global::System.Data.DataRow {
            
            private MemoryDataTable tableMemory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMemory = ((MemoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Memory_Id {
                get {
                    return ((int)(this[this.tableMemory.Memory_IdColumn]));
                }
                set {
                    this[this.tableMemory.Memory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_Id {
                get {
                    try {
                        return ((int)(this[this.tableMemory.Card_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Card_Id\' in table \'Memory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMemory.Card_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegisterCount {
                get {
                    return ((int)(this[this.tableMemory.RegisterCountColumn]));
                }
                set {
                    this[this.tableMemory.RegisterCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Memory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Memory"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCard_IdNull() {
                return this.IsNull(this.tableMemory.Card_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCard_IdNull() {
                this[this.tableMemory.Card_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegisterRow[] GetRegisterRows() {
                if ((this.Table.ChildRelations["Memory_Register"] == null)) {
                    return new RegisterRow[0];
                }
                else {
                    return ((RegisterRow[])(base.GetChildRows(this.Table.ChildRelations["Memory_Register"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RegisterRow : global::System.Data.DataRow {
            
            private RegisterDataTable tableRegister;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegisterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegister = ((RegisterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Memory_Id {
                get {
                    try {
                        return ((int)(this[this.tableRegister.Memory_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Memory_Id\' in table \'Register\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegister.Memory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableRegister.IdColumn]));
                }
                set {
                    this[this.tableRegister.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Value {
                get {
                    try {
                        return ((double)(this[this.tableRegister.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'Register\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegister.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Mantissa {
                get {
                    try {
                        return ((decimal)(this[this.tableRegister.MantissaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mantissa\' in table \'Register\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegister.MantissaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sbyte Exponent {
                get {
                    try {
                        return ((sbyte)(this[this.tableRegister.ExponentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exponent\' in table \'Register\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegister.ExponentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryRow MemoryRow {
                get {
                    return ((MemoryRow)(this.GetParentRow(this.Table.ParentRelations["Memory_Register"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Memory_Register"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemory_IdNull() {
                return this.IsNull(this.tableRegister.Memory_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemory_IdNull() {
                this[this.tableRegister.Memory_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableRegister.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableRegister.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMantissaNull() {
                return this.IsNull(this.tableRegister.MantissaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMantissaNull() {
                this[this.tableRegister.MantissaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExponentNull() {
                return this.IsNull(this.tableRegister.ExponentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExponentNull() {
                this[this.tableRegister.ExponentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProgramRow : global::System.Data.DataRow {
            
            private ProgramDataTable tableProgram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProgram = ((ProgramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    return ((int)(this[this.tableProgram.Program_IdColumn]));
                }
                set {
                    this[this.tableProgram.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_Id {
                get {
                    try {
                        return ((int)(this[this.tableProgram.Card_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Card_Id\' in table \'Program\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgram.Card_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstructionCount {
                get {
                    try {
                        return ((int)(this[this.tableProgram.InstructionCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstructionCount\' in table \'Program\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgram.InstructionCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LabelCount {
                get {
                    try {
                        return ((int)(this[this.tableProgram.LabelCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LabelCount\' in table \'Program\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgram.LabelCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow CardRow {
                get {
                    return ((CardRow)(this.GetParentRow(this.Table.ParentRelations["Card_Program"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Card_Program"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCard_IdNull() {
                return this.IsNull(this.tableProgram.Card_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCard_IdNull() {
                this[this.tableProgram.Card_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstructionCountNull() {
                return this.IsNull(this.tableProgram.InstructionCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstructionCountNull() {
                this[this.tableProgram.InstructionCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelCountNull() {
                return this.IsNull(this.tableProgram.LabelCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelCountNull() {
                this[this.tableProgram.LabelCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionRow[] GetInstructionRows() {
                if ((this.Table.ChildRelations["Program_Instruction"] == null)) {
                    return new InstructionRow[0];
                }
                else {
                    return ((InstructionRow[])(base.GetChildRows(this.Table.ChildRelations["Program_Instruction"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow[] GetLabelRows() {
                if ((this.Table.ChildRelations["Program_Label"] == null)) {
                    return new LabelRow[0];
                }
                else {
                    return ((LabelRow[])(base.GetChildRows(this.Table.ChildRelations["Program_Label"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InstructionRow : global::System.Data.DataRow {
            
            private InstructionDataTable tableInstruction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InstructionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInstruction = ((InstructionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Instruction_Id {
                get {
                    return ((int)(this[this.tableInstruction.Instruction_IdColumn]));
                }
                set {
                    this[this.tableInstruction.Instruction_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    try {
                        return ((int)(this[this.tableInstruction.Program_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Program_Id\' in table \'Instruction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInstruction.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Step {
                get {
                    return ((int)(this[this.tableInstruction.StepColumn]));
                }
                set {
                    this[this.tableInstruction.StepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Instruction {
                get {
                    return ((string)(this[this.tableInstruction.InstructionColumn]));
                }
                set {
                    this[this.tableInstruction.InstructionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArgumentCount {
                get {
                    try {
                        return ((int)(this[this.tableInstruction.ArgumentCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArgumentCount\' in table \'Instruction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInstruction.ArgumentCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow ProgramRow {
                get {
                    return ((ProgramRow)(this.GetParentRow(this.Table.ParentRelations["Program_Instruction"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Program_Instruction"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgram_IdNull() {
                return this.IsNull(this.tableInstruction.Program_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgram_IdNull() {
                this[this.tableInstruction.Program_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArgumentCountNull() {
                return this.IsNull(this.tableInstruction.ArgumentCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArgumentCountNull() {
                this[this.tableInstruction.ArgumentCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgumentRow[] GetArgumentRows() {
                if ((this.Table.ChildRelations["Instruction_Argument"] == null)) {
                    return new ArgumentRow[0];
                }
                else {
                    return ((ArgumentRow[])(base.GetChildRows(this.Table.ChildRelations["Instruction_Argument"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ArgumentRow : global::System.Data.DataRow {
            
            private ArgumentDataTable tableArgument;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArgumentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArgument = ((ArgumentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Instruction_Id {
                get {
                    try {
                        return ((int)(this[this.tableArgument.Instruction_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instruction_Id\' in table \'Argument\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArgument.Instruction_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableArgument.IdColumn]));
                }
                set {
                    this[this.tableArgument.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableArgument.TypeColumn]));
                }
                set {
                    this[this.tableArgument.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableArgument.ValueColumn]));
                }
                set {
                    this[this.tableArgument.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionRow InstructionRow {
                get {
                    return ((InstructionRow)(this.GetParentRow(this.Table.ParentRelations["Instruction_Argument"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Instruction_Argument"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstruction_IdNull() {
                return this.IsNull(this.tableArgument.Instruction_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstruction_IdNull() {
                this[this.tableArgument.Instruction_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LabelRow : global::System.Data.DataRow {
            
            private LabelDataTable tableLabel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabel = ((LabelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    return ((int)(this[this.tableLabel.Label_IdColumn]));
                }
                set {
                    this[this.tableLabel.Label_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Program_Id {
                get {
                    try {
                        return ((int)(this[this.tableLabel.Program_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Program_Id\' in table \'Label\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabel.Program_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableLabel.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'Label\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabel.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StepCount {
                get {
                    try {
                        return ((int)(this[this.tableLabel.StepCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StepCount\' in table \'Label\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabel.StepCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow ProgramRow {
                get {
                    return ((ProgramRow)(this.GetParentRow(this.Table.ParentRelations["Program_Label"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Program_Label"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgram_IdNull() {
                return this.IsNull(this.tableLabel.Program_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgram_IdNull() {
                this[this.tableLabel.Program_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableLabel.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableLabel.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStepCountNull() {
                return this.IsNull(this.tableLabel.StepCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStepCountNull() {
                this[this.tableLabel.StepCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StepRow[] GetStepRows() {
                if ((this.Table.ChildRelations["Label_Step"] == null)) {
                    return new StepRow[0];
                }
                else {
                    return ((StepRow[])(base.GetChildRows(this.Table.ChildRelations["Label_Step"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StepRow : global::System.Data.DataRow {
            
            private StepDataTable tableStep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StepRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStep = ((StepDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    try {
                        return ((int)(this[this.tableStep.Label_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Label_Id\' in table \'Step\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStep.Label_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Step {
                get {
                    return ((int)(this[this.tableStep.StepColumn]));
                }
                set {
                    this[this.tableStep.StepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow LabelRow {
                get {
                    return ((LabelRow)(this.GetParentRow(this.Table.ParentRelations["Label_Step"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Label_Step"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabel_IdNull() {
                return this.IsNull(this.tableStep.Label_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabel_IdNull() {
                this[this.tableStep.Label_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CardRowChangeEvent : global::System.EventArgs {
            
            private CardRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRowChangeEvent(CardRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CardSlotRowChangeEvent : global::System.EventArgs {
            
            private CardSlotRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRowChangeEvent(CardSlotRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardSlotRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TextBoxRowChangeEvent : global::System.EventArgs {
            
            private TextBoxRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TextBoxRowChangeEvent(TextBoxRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TextBoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RTFBoxRowChangeEvent : global::System.EventArgs {
            
            private RTFBoxRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTFBoxRowChangeEvent(RTFBoxRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RTFBoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DisplayRowChangeEvent : global::System.EventArgs {
            
            private DisplayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisplayRowChangeEvent(DisplayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisplayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EngineRowChangeEvent : global::System.EventArgs {
            
            private EngineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineRowChangeEvent(EngineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EngineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlagRowChangeEvent : global::System.EventArgs {
            
            private FlagRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRowChangeEvent(FlagRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MemoryRowChangeEvent : global::System.EventArgs {
            
            private MemoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryRowChangeEvent(MemoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegisterRowChangeEvent : global::System.EventArgs {
            
            private RegisterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegisterRowChangeEvent(RegisterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegisterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProgramRowChangeEvent : global::System.EventArgs {
            
            private ProgramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRowChangeEvent(ProgramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InstructionRowChangeEvent : global::System.EventArgs {
            
            private InstructionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionRowChangeEvent(InstructionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstructionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ArgumentRowChangeEvent : global::System.EventArgs {
            
            private ArgumentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgumentRowChangeEvent(ArgumentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArgumentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabelRowChangeEvent : global::System.EventArgs {
            
            private LabelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRowChangeEvent(LabelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StepRowChangeEvent : global::System.EventArgs {
            
            private StepRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StepRowChangeEvent(StepRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591